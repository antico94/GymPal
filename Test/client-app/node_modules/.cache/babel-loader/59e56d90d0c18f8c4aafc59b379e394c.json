{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeCool\\\\TW3\\\\Test\\\\Test\\\\client-app\\\\src\\\\components\\\\Selects\\\\CustomSelect.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// @ts-nocheck\nimport React, { useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport CloseCircle from \"../assets/svg/closeCircle.svg\";\nimport CloseCircleDark from \"../assets/svg/closeCircleDark.svg\";\nimport CloseLine from \"../assets/svg/closeLine.svg\";\nimport CloseSquare from \"../assets/svg/closeSquare.svg\";\nimport DownArrow from \"../assets/svg/downArrow.svg\";\nimport { IMultiselectProps } from \"./interface\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst closeIconTypes = {\n  circle: CloseCircleDark,\n  circle2: CloseCircle,\n  close: CloseSquare,\n  cancel: CloseLine\n};\n\nfunction useOutsideAlerter(ref, clickEvent) {\n  _s();\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        clickEvent();\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n}\n/**\r\n * Component that alerts if you click outside of it\r\n */\n\n\n_s(useOutsideAlerter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction OutsideAlerter(props) {\n  _s2();\n\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props.outsideClick);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 12\n  }, this);\n}\n\n_s2(OutsideAlerter, \"kF1gJ+9qozGrx9T2BaxcGZVoPDQ=\", false, function () {\n  return [useOutsideAlerter];\n});\n\n_c = OutsideAlerter;\nexport class Multiselect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      options: props.options,\n      filteredOptions: props.options,\n      unfilteredOptions: props.options,\n      selectedValues: Object.assign([], props.selectedValues),\n      preSelectedValues: Object.assign([], props.selectedValues),\n      toggleOptionsList: false,\n      highlightOption: props.avoidHighlightFirstOption ? -1 : 0,\n      showCheckbox: props.showCheckbox,\n      keepSearchTerm: props.keepSearchTerm,\n      groupedObject: [],\n      closeIconType: closeIconTypes[props.closeIcon] || closeIconTypes['circle']\n    }; // @ts-ignore\n\n    this.optionTimeout = null; // @ts-ignore\n\n    this.searchWrapper = /*#__PURE__*/React.createRef(); // @ts-ignore\n\n    this.searchBox = /*#__PURE__*/React.createRef();\n    this.onChange = this.onChange.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.renderMultiselectContainer = this.renderMultiselectContainer.bind(this);\n    this.renderSelectedList = this.renderSelectedList.bind(this);\n    this.onRemoveSelectedItem = this.onRemoveSelectedItem.bind(this);\n    this.toggelOptionList = this.toggelOptionList.bind(this);\n    this.onArrowKeyNavigation = this.onArrowKeyNavigation.bind(this);\n    this.onSelectItem = this.onSelectItem.bind(this);\n    this.filterOptionsByInput = this.filterOptionsByInput.bind(this);\n    this.removeSelectedValuesFromOptions = this.removeSelectedValuesFromOptions.bind(this);\n    this.isSelectedValue = this.isSelectedValue.bind(this);\n    this.fadeOutSelection = this.fadeOutSelection.bind(this);\n    this.isDisablePreSelectedValues = this.isDisablePreSelectedValues.bind(this);\n    this.renderGroupByOptions = this.renderGroupByOptions.bind(this);\n    this.renderNormalOption = this.renderNormalOption.bind(this);\n    this.listenerCallback = this.listenerCallback.bind(this);\n    this.resetSelectedValues = this.resetSelectedValues.bind(this);\n    this.getSelectedItems = this.getSelectedItems.bind(this);\n    this.getSelectedItemsCount = this.getSelectedItemsCount.bind(this);\n    this.hideOnClickOutside = this.hideOnClickOutside.bind(this);\n    this.onCloseOptionList = this.onCloseOptionList.bind(this);\n    this.isVisible = this.isVisible.bind(this);\n  }\n\n  initialSetValue() {\n    const {\n      showCheckbox,\n      groupBy,\n      singleSelect\n    } = this.props;\n    const {\n      options\n    } = this.state;\n\n    if (!showCheckbox && !singleSelect) {\n      this.removeSelectedValuesFromOptions(false);\n    } // if (singleSelect) {\n    //   this.hideOnClickOutside();\n    // }\n\n\n    if (groupBy) {\n      this.groupByOptions(options);\n    }\n  }\n\n  resetSelectedValues() {\n    const {\n      unfilteredOptions\n    } = this.state;\n    return new Promise(resolve => {\n      this.setState({\n        selectedValues: [],\n        preSelectedValues: [],\n        options: unfilteredOptions,\n        filteredOptions: unfilteredOptions\n      }, () => {\n        // @ts-ignore\n        resolve();\n        this.initialSetValue();\n      });\n    });\n  }\n\n  getSelectedItems() {\n    return this.state.selectedValues;\n  }\n\n  getSelectedItemsCount() {\n    return this.state.selectedValues.length;\n  }\n\n  componentDidMount() {\n    this.initialSetValue(); // @ts-ignore\n\n    this.searchWrapper.current.addEventListener(\"click\", this.listenerCallback);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      options,\n      selectedValues\n    } = this.props;\n    const {\n      options: prevOptions,\n      selectedValues: prevSelectedvalues\n    } = prevProps;\n\n    if (JSON.stringify(prevOptions) !== JSON.stringify(options)) {\n      this.setState({\n        options,\n        filteredOptions: options,\n        unfilteredOptions: options\n      }, this.initialSetValue);\n    }\n\n    if (JSON.stringify(prevSelectedvalues) !== JSON.stringify(selectedValues)) {\n      this.setState({\n        selectedValues: Object.assign([], selectedValues),\n        preSelectedValues: Object.assign([], selectedValues)\n      }, this.initialSetValue);\n    }\n  }\n\n  listenerCallback() {\n    // @ts-ignore\n    this.searchBox.current.focus();\n  }\n\n  componentWillUnmount() {\n    // @ts-ignore\n    if (this.optionTimeout) {\n      // @ts-ignore\n      clearTimeout(this.optionTimeout);\n    } // @ts-ignore\n\n\n    this.searchWrapper.current.removeEventListener('click', this.listenerCallback);\n  } // Skipcheck flag - value will be true when the func called from on deselect anything.\n\n\n  removeSelectedValuesFromOptions(skipCheck) {\n    const {\n      isObject,\n      displayValue,\n      groupBy\n    } = this.props;\n    const {\n      selectedValues = [],\n      unfilteredOptions,\n      options\n    } = this.state;\n\n    if (!skipCheck && groupBy) {\n      this.groupByOptions(options);\n    }\n\n    if (!selectedValues.length && !skipCheck) {\n      return;\n    }\n\n    if (isObject) {\n      let optionList = unfilteredOptions.filter(item => {\n        return selectedValues.findIndex(v => v[displayValue] === item[displayValue]) === -1 ? true : false;\n      });\n\n      if (groupBy) {\n        this.groupByOptions(optionList);\n      }\n\n      this.setState({\n        options: optionList,\n        filteredOptions: optionList\n      }, this.filterOptionsByInput);\n      return;\n    }\n\n    let optionList = unfilteredOptions.filter(item => selectedValues.indexOf(item) === -1);\n    this.setState({\n      options: optionList,\n      filteredOptions: optionList\n    }, this.filterOptionsByInput);\n  }\n\n  groupByOptions(options) {\n    const {\n      groupBy\n    } = this.props;\n    const groupedObject = options.reduce(function (r, a) {\n      const key = a[groupBy] || \"Others\";\n      r[key] = r[key] || [];\n      r[key].push(a);\n      return r;\n    }, Object.create({}));\n    this.setState({\n      groupedObject\n    });\n  }\n\n  onChange(event) {\n    const {\n      onSearch\n    } = this.props;\n    this.setState({\n      inputValue: event.target.value\n    }, this.filterOptionsByInput);\n\n    if (onSearch) {\n      onSearch(event.target.value);\n    }\n  }\n\n  onKeyPress(event) {\n    const {\n      onKeyPressFn\n    } = this.props;\n\n    if (onKeyPressFn) {\n      onKeyPressFn(event, event.target.value);\n    }\n  }\n\n  filterOptionsByInput() {\n    let {\n      options,\n      filteredOptions,\n      inputValue\n    } = this.state;\n    const {\n      isObject,\n      displayValue\n    } = this.props;\n\n    if (isObject) {\n      options = filteredOptions.filter(i => this.matchValues(i[displayValue], inputValue));\n    } else {\n      options = filteredOptions.filter(i => this.matchValues(i, inputValue));\n    }\n\n    this.groupByOptions(options);\n    this.setState({\n      options\n    });\n  }\n\n  matchValues(value, search) {\n    if (this.props.caseSensitiveSearch) {\n      return value.indexOf(search) > -1;\n    }\n\n    if (value.toLowerCase) {\n      return value.toLowerCase().indexOf(search.toLowerCase()) > -1;\n    }\n\n    return value.toString().indexOf(search) > -1;\n  }\n\n  onArrowKeyNavigation(e) {\n    const {\n      options,\n      highlightOption,\n      toggleOptionsList,\n      inputValue,\n      selectedValues\n    } = this.state;\n    const {\n      disablePreSelectedValues\n    } = this.props;\n\n    if (e.keyCode === 8 && !inputValue && !disablePreSelectedValues && selectedValues.length) {\n      this.onRemoveSelectedItem(selectedValues.length - 1);\n    }\n\n    if (!options.length) {\n      return;\n    }\n\n    if (e.keyCode === 38) {\n      if (highlightOption > 0) {\n        this.setState(previousState => ({\n          highlightOption: previousState.highlightOption - 1\n        }));\n      } else {\n        this.setState({\n          highlightOption: options.length - 1\n        });\n      }\n    } else if (e.keyCode === 40) {\n      if (highlightOption < options.length - 1) {\n        this.setState(previousState => ({\n          highlightOption: previousState.highlightOption + 1\n        }));\n      } else {\n        this.setState({\n          highlightOption: 0\n        });\n      }\n    } else if (e.key === \"Enter\" && options.length && toggleOptionsList) {\n      if (highlightOption === -1) {\n        return;\n      }\n\n      this.onSelectItem(options[highlightOption]);\n    } // TODO: Instead of scrollIntoView need to find better soln for scroll the dropwdown container.\n    // setTimeout(() => {\n    //   const element = document.querySelector(\"ul.optionContainer .highlight\");\n    //   if (element) {\n    //     element.scrollIntoView();\n    //   }\n    // });\n\n  }\n\n  onRemoveSelectedItem(item) {\n    let {\n      selectedValues,\n      index = 0\n    } = this.state;\n    const {\n      onRemove,\n      showCheckbox,\n      displayValue,\n      isObject\n    } = this.props;\n\n    if (isObject) {\n      index = selectedValues.findIndex(i => i[displayValue] === item[displayValue]);\n    } else {\n      index = selectedValues.indexOf(item);\n    }\n\n    selectedValues.splice(index, 1);\n    onRemove(selectedValues, item);\n    this.setState({\n      selectedValues\n    }, () => {\n      if (!showCheckbox) {\n        this.removeSelectedValuesFromOptions(true);\n      }\n    });\n\n    if (!this.props.closeOnSelect) {\n      // @ts-ignore\n      this.searchBox.current.focus();\n    }\n  }\n\n  onSelectItem(item) {\n    const {\n      selectedValues\n    } = this.state;\n    const {\n      selectionLimit,\n      onSelect,\n      singleSelect,\n      showCheckbox\n    } = this.props;\n\n    if (!this.state.keepSearchTerm) {\n      this.setState({\n        inputValue: ''\n      });\n    }\n\n    if (singleSelect) {\n      this.onSingleSelect(item);\n      onSelect([item], item);\n      return;\n    }\n\n    if (this.isSelectedValue(item)) {\n      this.onRemoveSelectedItem(item);\n      return;\n    }\n\n    if (selectionLimit == selectedValues.length) {\n      return;\n    }\n\n    selectedValues.push(item);\n    onSelect(selectedValues, item);\n    this.setState({\n      selectedValues\n    }, () => {\n      if (!showCheckbox) {\n        this.removeSelectedValuesFromOptions(true);\n      } else {\n        this.filterOptionsByInput();\n      }\n    });\n\n    if (!this.props.closeOnSelect) {\n      // @ts-ignore\n      this.searchBox.current.focus();\n    }\n  }\n\n  onSingleSelect(item) {\n    this.setState({\n      selectedValues: [item],\n      toggleOptionsList: false\n    });\n  }\n\n  isSelectedValue(item) {\n    const {\n      isObject,\n      displayValue\n    } = this.props;\n    const {\n      selectedValues\n    } = this.state;\n\n    if (isObject) {\n      return selectedValues.filter(i => i[displayValue] === item[displayValue]).length > 0;\n    }\n\n    return selectedValues.filter(i => i === item).length > 0;\n  }\n\n  renderOptionList() {\n    const {\n      groupBy,\n      style,\n      emptyRecordMsg,\n      loading,\n      loadingMessage = 'loading...'\n    } = this.props;\n    const {\n      options\n    } = this.state;\n\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: `optionContainer`,\n        style: style['optionContainer'],\n        children: [typeof loadingMessage === 'string' && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: style['loadingMessage'],\n          className: `notFound`,\n          children: loadingMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 60\n        }, this), typeof loadingMessage !== 'string' && loadingMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `optionContainer`,\n      style: style['optionContainer'],\n      children: [options.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: style['notFound'],\n        className: `notFound`,\n        children: emptyRecordMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 42\n      }, this), !groupBy ? this.renderNormalOption() : this.renderGroupByOptions()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderGroupByOptions() {\n    const {\n      isObject = false,\n      displayValue,\n      showCheckbox,\n      style,\n      singleSelect\n    } = this.props;\n    const {\n      groupedObject\n    } = this.state;\n    return Object.keys(groupedObject).map(obj => {\n      const isSelected = this.isSelectedValue(option);\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"groupHeading\",\n          style: style['groupHeading'],\n          children: obj\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 21\n        }, this), groupedObject[obj].map((option, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: style['option'],\n          className: `groupChildEle option ${isSelected ? 'selected' : ''} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`,\n          onClick: () => this.onSelectItem(option),\n          children: [showCheckbox && !singleSelect && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: 'checkbox',\n            readOnly: true,\n            checked: isSelected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 33\n          }, this), isObject ? option[displayValue] : (option || '').toString()]\n        }, `option${i}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 25\n        }, this))]\n      }, obj, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  renderNormalOption() {\n    const {\n      isObject = false,\n      displayValue,\n      showCheckbox,\n      style,\n      singleSelect\n    } = this.props;\n    const {\n      highlightOption\n    } = this.state;\n    return this.state.options.map((option, i) => {\n      const isSelected = this.isSelectedValue(option);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        style: style['option'],\n        className: `option ${isSelected ? 'selected' : ''} ${highlightOption === i ? `highlightOption highlight` : \"\"} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`,\n        onClick: () => this.onSelectItem(option),\n        children: [showCheckbox && !singleSelect && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          readOnly: true,\n          className: `checkbox`,\n          checked: isSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 25\n        }, this), isObject ? option[displayValue] : (option || '').toString()]\n      }, `option${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  renderSelectedList() {\n    const {\n      isObject = false,\n      displayValue,\n      style,\n      singleSelect,\n      customCloseIcon\n    } = this.props;\n    const {\n      selectedValues,\n      closeIconType\n    } = this.state;\n    return selectedValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `chip  ${singleSelect && 'singleChip'} ${this.isDisablePreSelectedValues(value) && 'disableSelection'}`,\n      style: style['chips'],\n      children: [!isObject ? (value || '').toString() : value[displayValue], !this.isDisablePreSelectedValues(value) && (!customCloseIcon ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon_cancel closeIcon\",\n        src: closeIconType,\n        onClick: () => this.onRemoveSelectedItem(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 81\n      }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"custom-close\",\n        onClick: () => this.onRemoveSelectedItem(value),\n        children: customCloseIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 22\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 13\n    }, this));\n  }\n\n  isDisablePreSelectedValues(value) {\n    const {\n      isObject,\n      disablePreSelectedValues,\n      displayValue\n    } = this.props;\n    const {\n      preSelectedValues\n    } = this.state;\n\n    if (!disablePreSelectedValues || !preSelectedValues.length) {\n      return false;\n    }\n\n    if (isObject) {\n      return preSelectedValues.filter(i => i[displayValue] === value[displayValue]).length > 0;\n    }\n\n    return preSelectedValues.filter(i => i === value).length > 0;\n  }\n\n  fadeOutSelection(item) {\n    const {\n      selectionLimit,\n      showCheckbox,\n      singleSelect\n    } = this.props;\n\n    if (singleSelect) {\n      return;\n    }\n\n    const {\n      selectedValues\n    } = this.state;\n\n    if (selectionLimit == -1) {\n      return false;\n    }\n\n    if (selectionLimit != selectedValues.length) {\n      return false;\n    }\n\n    if (selectionLimit == selectedValues.length) {\n      if (!showCheckbox) {\n        return true;\n      } else {\n        if (this.isSelectedValue(item)) {\n          return false;\n        }\n\n        return true;\n      }\n    }\n  }\n\n  toggelOptionList() {\n    this.setState({\n      toggleOptionsList: !this.state.toggleOptionsList,\n      highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0\n    });\n  }\n\n  onCloseOptionList() {\n    this.setState({\n      toggleOptionsList: false,\n      highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0,\n      inputValue: ''\n    });\n  }\n\n  onFocus() {\n    if (this.state.toggleOptionsList) {\n      // @ts-ignore\n      clearTimeout(this.optionTimeout);\n    } else {\n      this.toggelOptionList();\n    }\n  }\n\n  onBlur() {\n    this.setState({\n      inputValue: ''\n    }); // @ts-ignore\n\n    this.optionTimeout = setTimeout(this.onCloseOptionList, 250);\n  }\n\n  isVisible(elem) {\n    return !!elem && !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  }\n\n  hideOnClickOutside() {\n    const element = document.getElementsByClassName('multiselect-container')[0];\n\n    const outsideClickListener = event => {\n      if (element && !element.contains(event.target) && this.isVisible(element)) {\n        this.toggelOptionList();\n      }\n    };\n\n    document.addEventListener('click', outsideClickListener);\n  }\n\n  renderMultiselectContainer() {\n    const {\n      inputValue,\n      toggleOptionsList,\n      selectedValues\n    } = this.state;\n    const {\n      placeholder,\n      style,\n      singleSelect,\n      id,\n      hidePlaceholder,\n      disable,\n      showArrow,\n      className,\n      customArrow\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `multiselect-container multiSelectContainer ${disable ? `disable_ms` : ''} ${className || ''}`,\n      id: id || 'multiselectContainerReact',\n      style: style['multiselectContainer'],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `search-wrapper searchWrapper ${singleSelect ? 'singleSelect' : ''}`,\n        ref: this.searchWrapper,\n        style: style['searchBox'],\n        onClick: singleSelect ? this.toggelOptionList : () => {},\n        children: [this.renderSelectedList(), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: this.searchBox,\n          className: \"searchBox\",\n          id: `${id || 'search'}_input`,\n          onChange: this.onChange,\n          onKeyPress: this.onKeyPress,\n          value: inputValue,\n          onFocus: this.onFocus,\n          onBlur: this.onBlur,\n          placeholder: singleSelect && selectedValues.length || hidePlaceholder && selectedValues.length ? '' : placeholder,\n          onKeyDown: this.onArrowKeyNavigation,\n          style: style['inputField'],\n          autoComplete: \"off\",\n          disabled: singleSelect || disable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 21\n        }, this), (singleSelect || showArrow) && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: customArrow ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"icon_down_dir\",\n            children: customArrow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 44\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: DownArrow,\n            className: `icon_cancel icon_down_dir`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 99\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `optionListContainer ${toggleOptionsList ? 'displayBlock' : 'displayNone'}`,\n        onMouseDown: e => {\n          e.preventDefault();\n        },\n        children: this.renderOptionList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(OutsideAlerter, {\n      outsideClick: this.onCloseOptionList,\n      children: this.renderMultiselectContainer()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nMultiselect.defaultProps = {\n  options: [],\n  disablePreSelectedValues: false,\n  selectedValues: [],\n  isObject: true,\n  displayValue: \"model\",\n  showCheckbox: false,\n  selectionLimit: -1,\n  placeholder: \"Select\",\n  groupBy: \"\",\n  style: {},\n  emptyRecordMsg: \"No Options Available\",\n  onSelect: () => {},\n  onRemove: () => {},\n  onKeyPressFn: () => {},\n  closeIcon: 'circle2',\n  singleSelect: false,\n  caseSensitiveSearch: false,\n  id: '',\n  closeOnSelect: true,\n  avoidHighlightFirstOption: false,\n  hidePlaceholder: false,\n  showArrow: false,\n  keepSearchTerm: false,\n  customCloseIcon: '',\n  className: '',\n  customArrow: undefined\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"OutsideAlerter\");","map":{"version":3,"sources":["D:/CodeCool/TW3/Test/Test/client-app/src/components/Selects/CustomSelect.js"],"names":["React","useRef","useEffect","IMultiselectProps","closeIconTypes","circle","CloseCircleDark","circle2","CloseCircle","close","CloseSquare","cancel","CloseLine","useOutsideAlerter","ref","clickEvent","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","OutsideAlerter","props","wrapperRef","outsideClick","children","Multiselect","Component","constructor","state","inputValue","options","filteredOptions","unfilteredOptions","selectedValues","Object","assign","preSelectedValues","toggleOptionsList","highlightOption","avoidHighlightFirstOption","showCheckbox","keepSearchTerm","groupedObject","closeIconType","closeIcon","optionTimeout","searchWrapper","createRef","searchBox","onChange","bind","onKeyPress","onFocus","onBlur","renderMultiselectContainer","renderSelectedList","onRemoveSelectedItem","toggelOptionList","onArrowKeyNavigation","onSelectItem","filterOptionsByInput","removeSelectedValuesFromOptions","isSelectedValue","fadeOutSelection","isDisablePreSelectedValues","renderGroupByOptions","renderNormalOption","listenerCallback","resetSelectedValues","getSelectedItems","getSelectedItemsCount","hideOnClickOutside","onCloseOptionList","isVisible","initialSetValue","groupBy","singleSelect","groupByOptions","Promise","resolve","setState","length","componentDidMount","componentDidUpdate","prevProps","prevOptions","prevSelectedvalues","JSON","stringify","focus","componentWillUnmount","clearTimeout","skipCheck","isObject","displayValue","optionList","filter","item","findIndex","v","indexOf","reduce","r","a","key","push","create","onSearch","value","onKeyPressFn","i","matchValues","search","caseSensitiveSearch","toLowerCase","toString","e","disablePreSelectedValues","keyCode","previousState","index","onRemove","splice","closeOnSelect","selectionLimit","onSelect","onSingleSelect","renderOptionList","style","emptyRecordMsg","loading","loadingMessage","keys","map","obj","isSelected","option","customCloseIcon","setTimeout","elem","offsetWidth","offsetHeight","getClientRects","element","getElementsByClassName","outsideClickListener","placeholder","id","hidePlaceholder","disable","showArrow","className","customArrow","DownArrow","preventDefault","render","defaultProps","undefined"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport CloseCircle from '../assets/svg/closeCircle.svg';\r\nimport CloseCircleDark from '../assets/svg/closeCircleDark.svg';\r\nimport CloseLine from '../assets/svg/closeLine.svg';\r\nimport CloseSquare from '../assets/svg/closeSquare.svg';\r\nimport DownArrow from '../assets/svg/downArrow.svg';\r\nimport {IMultiselectProps} from \"./interface\";\r\n\r\nconst closeIconTypes = {\r\n    circle: CloseCircleDark,\r\n    circle2: CloseCircle,\r\n    close: CloseSquare,\r\n    cancel: CloseLine\r\n};\r\n\r\nfunction useOutsideAlerter(ref, clickEvent) {\r\n    useEffect(() => {\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                clickEvent();\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\n/**\r\n * Component that alerts if you click outside of it\r\n */\r\nfunction OutsideAlerter(props) {\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef, props.outsideClick);\r\n    return <div ref={wrapperRef}>{props.children}</div>;\r\n}\r\n\r\nexport class Multiselect extends React.Component<IMultiselectProps, any> {\r\n    static defaultProps: { customArrow: any; className: string; options: never[]; disablePreSelectedValues: boolean; selectedValues: never[]; isObject: boolean; displayValue: string; showCheckbox: boolean; selectionLimit: number; placeholder: string; groupBy: string; style: {}; emptyRecordMsg: string; onSelect: () => void; onRemove: () => void;onKeyPressFn: ()=>void; closeIcon: string; singleSelect: boolean; caseSensitiveSearch: boolean; id: string; closeOnSelect: boolean; avoidHighlightFirstOption: boolean; hidePlaceholder: boolean; showArrow: boolean; keepSearchTerm: boolean; };\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: \"\",\r\n            options: props.options,\r\n            filteredOptions: props.options,\r\n            unfilteredOptions: props.options,\r\n            selectedValues: Object.assign([], props.selectedValues),\r\n            preSelectedValues: Object.assign([], props.selectedValues),\r\n            toggleOptionsList: false,\r\n            highlightOption: props.avoidHighlightFirstOption ? -1 : 0,\r\n            showCheckbox: props.showCheckbox,\r\n            keepSearchTerm: props.keepSearchTerm,\r\n            groupedObject: [],\r\n            closeIconType: closeIconTypes[props.closeIcon] || closeIconTypes['circle']\r\n        };\r\n        // @ts-ignore\r\n        this.optionTimeout = null;\r\n        // @ts-ignore\r\n        this.searchWrapper = React.createRef();\r\n        // @ts-ignore\r\n        this.searchBox = React.createRef();\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onKeyPress = this.onKeyPress.bind(this);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.renderMultiselectContainer = this.renderMultiselectContainer.bind(this);\r\n        this.renderSelectedList = this.renderSelectedList.bind(this);\r\n        this.onRemoveSelectedItem = this.onRemoveSelectedItem.bind(this);\r\n        this.toggelOptionList = this.toggelOptionList.bind(this);\r\n        this.onArrowKeyNavigation = this.onArrowKeyNavigation.bind(this);\r\n        this.onSelectItem = this.onSelectItem.bind(this);\r\n        this.filterOptionsByInput = this.filterOptionsByInput.bind(this);\r\n        this.removeSelectedValuesFromOptions = this.removeSelectedValuesFromOptions.bind(this);\r\n        this.isSelectedValue = this.isSelectedValue.bind(this);\r\n        this.fadeOutSelection = this.fadeOutSelection.bind(this);\r\n        this.isDisablePreSelectedValues = this.isDisablePreSelectedValues.bind(this);\r\n        this.renderGroupByOptions = this.renderGroupByOptions.bind(this);\r\n        this.renderNormalOption = this.renderNormalOption.bind(this);\r\n        this.listenerCallback = this.listenerCallback.bind(this);\r\n        this.resetSelectedValues = this.resetSelectedValues.bind(this);\r\n        this.getSelectedItems = this.getSelectedItems.bind(this);\r\n        this.getSelectedItemsCount = this.getSelectedItemsCount.bind(this);\r\n        this.hideOnClickOutside = this.hideOnClickOutside.bind(this);\r\n        this.onCloseOptionList = this.onCloseOptionList.bind(this);\r\n        this.isVisible = this.isVisible.bind(this);\r\n    }\r\n\r\n    initialSetValue() {\r\n        const { showCheckbox, groupBy, singleSelect } = this.props;\r\n        const { options } = this.state;\r\n        if (!showCheckbox && !singleSelect) {\r\n            this.removeSelectedValuesFromOptions(false);\r\n        }\r\n        // if (singleSelect) {\r\n        //   this.hideOnClickOutside();\r\n        // }\r\n        if (groupBy) {\r\n            this.groupByOptions(options);\r\n        }\r\n    }\r\n\r\n    resetSelectedValues() {\r\n        const { unfilteredOptions } = this.state;\r\n        return new Promise((resolve) => {\r\n            this.setState({\r\n                selectedValues: [],\r\n                preSelectedValues: [],\r\n                options: unfilteredOptions,\r\n                filteredOptions: unfilteredOptions\r\n            }, () => {\r\n                // @ts-ignore\r\n                resolve();\r\n                this.initialSetValue();\r\n            });\r\n        });\r\n    }\r\n\r\n    getSelectedItems() {\r\n        return this.state.selectedValues;\r\n    }\r\n\r\n    getSelectedItemsCount() {\r\n        return this.state.selectedValues.length;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initialSetValue();\r\n        // @ts-ignore\r\n        this.searchWrapper.current.addEventListener(\"click\", this.listenerCallback);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { options, selectedValues } = this.props;\r\n        const { options: prevOptions, selectedValues: prevSelectedvalues } = prevProps;\r\n        if (JSON.stringify(prevOptions) !== JSON.stringify(options)) {\r\n            this.setState({ options, filteredOptions: options, unfilteredOptions: options }, this.initialSetValue);\r\n        }\r\n        if (JSON.stringify(prevSelectedvalues) !== JSON.stringify(selectedValues)) {\r\n            this.setState({ selectedValues: Object.assign([], selectedValues), preSelectedValues: Object.assign([], selectedValues) }, this.initialSetValue);\r\n        }\r\n    }\r\n\r\n    listenerCallback() {\r\n        // @ts-ignore\r\n        this.searchBox.current.focus();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // @ts-ignore\r\n        if (this.optionTimeout) {\r\n            // @ts-ignore\r\n            clearTimeout(this.optionTimeout);\r\n        }\r\n        // @ts-ignore\r\n        this.searchWrapper.current.removeEventListener('click', this.listenerCallback);\r\n    }\r\n\r\n    // Skipcheck flag - value will be true when the func called from on deselect anything.\r\n    removeSelectedValuesFromOptions(skipCheck) {\r\n        const { isObject, displayValue, groupBy } = this.props;\r\n        const { selectedValues = [], unfilteredOptions, options } = this.state;\r\n        if (!skipCheck && groupBy) {\r\n            this.groupByOptions(options);\r\n        }\r\n        if (!selectedValues.length && !skipCheck) {\r\n            return;\r\n        }\r\n        if (isObject) {\r\n            let optionList = unfilteredOptions.filter(item => {\r\n                return selectedValues.findIndex(\r\n                    v => v[displayValue] === item[displayValue]\r\n                ) === -1\r\n                    ? true\r\n                    : false;\r\n            });\r\n            if (groupBy) {\r\n                this.groupByOptions(optionList);\r\n            }\r\n            this.setState(\r\n                { options: optionList, filteredOptions: optionList },\r\n                this.filterOptionsByInput\r\n            );\r\n            return;\r\n        }\r\n        let optionList = unfilteredOptions.filter(\r\n            item => selectedValues.indexOf(item) === -1\r\n        );\r\n\r\n        this.setState(\r\n            { options: optionList, filteredOptions: optionList },\r\n            this.filterOptionsByInput\r\n        );\r\n    }\r\n\r\n    groupByOptions(options) {\r\n        const { groupBy } = this.props;\r\n        const groupedObject = options.reduce(function(r, a) {\r\n            const key = a[groupBy] || \"Others\";\r\n            r[key] = r[key] || [];\r\n            r[key].push(a);\r\n            return r;\r\n        }, Object.create({}));\r\n\r\n        this.setState({ groupedObject });\r\n    }\r\n\r\n    onChange(event) {\r\n        const { onSearch } = this.props;\r\n        this.setState(\r\n            { inputValue: event.target.value },\r\n            this.filterOptionsByInput\r\n        );\r\n        if (onSearch) {\r\n            onSearch(event.target.value);\r\n        }\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        const { onKeyPressFn } = this.props;\r\n        if (onKeyPressFn) {\r\n            onKeyPressFn(event, event.target.value);\r\n        }\r\n    }\r\n\r\n    filterOptionsByInput() {\r\n        let { options, filteredOptions, inputValue } = this.state;\r\n        const { isObject, displayValue } = this.props;\r\n        if (isObject) {\r\n            options = filteredOptions.filter(i => this.matchValues(i[displayValue], inputValue))\r\n        } else {\r\n            options = filteredOptions.filter(i => this.matchValues(i, inputValue));\r\n        }\r\n        this.groupByOptions(options);\r\n        this.setState({ options });\r\n    }\r\n\r\n    matchValues(value, search) {\r\n        if (this.props.caseSensitiveSearch) {\r\n            return value.indexOf(search) > -1;\r\n        }\r\n        if (value.toLowerCase) {\r\n            return value.toLowerCase().indexOf(search.toLowerCase()) > -1;\r\n        }\r\n        return value.toString().indexOf(search) > -1;\r\n    }\r\n\r\n    onArrowKeyNavigation(e) {\r\n        const {\r\n            options,\r\n            highlightOption,\r\n            toggleOptionsList,\r\n            inputValue,\r\n            selectedValues\r\n        } = this.state;\r\n        const { disablePreSelectedValues } = this.props;\r\n        if (e.keyCode === 8 && !inputValue && !disablePreSelectedValues && selectedValues.length) {\r\n            this.onRemoveSelectedItem(selectedValues.length - 1);\r\n        }\r\n        if (!options.length) {\r\n            return;\r\n        }\r\n        if (e.keyCode === 38) {\r\n            if (highlightOption > 0) {\r\n                this.setState(previousState => ({\r\n                    highlightOption: previousState.highlightOption - 1\r\n                }));\r\n            } else {\r\n                this.setState({ highlightOption: options.length - 1 });\r\n            }\r\n        } else if (e.keyCode === 40) {\r\n            if (highlightOption < options.length - 1) {\r\n                this.setState(previousState => ({\r\n                    highlightOption: previousState.highlightOption + 1\r\n                }));\r\n            } else {\r\n                this.setState({ highlightOption: 0 });\r\n            }\r\n        } else if (e.key === \"Enter\" && options.length && toggleOptionsList) {\r\n            if (highlightOption === -1) {\r\n                return;\r\n            }\r\n            this.onSelectItem(options[highlightOption]);\r\n        }\r\n        // TODO: Instead of scrollIntoView need to find better soln for scroll the dropwdown container.\r\n        // setTimeout(() => {\r\n        //   const element = document.querySelector(\"ul.optionContainer .highlight\");\r\n        //   if (element) {\r\n        //     element.scrollIntoView();\r\n        //   }\r\n        // });\r\n    }\r\n\r\n    onRemoveSelectedItem(item) {\r\n        let { selectedValues, index = 0 } = this.state;\r\n        const { onRemove, showCheckbox, displayValue, isObject } = this.props;\r\n        if (isObject) {\r\n            index = selectedValues.findIndex(\r\n                i => i[displayValue] === item[displayValue]\r\n            );\r\n        } else {\r\n            index = selectedValues.indexOf(item);\r\n        }\r\n        selectedValues.splice(index, 1);\r\n        onRemove(selectedValues, item);\r\n        this.setState({ selectedValues }, () => {\r\n            if (!showCheckbox) {\r\n                this.removeSelectedValuesFromOptions(true);\r\n            }\r\n        });\r\n        if (!this.props.closeOnSelect) {\r\n            // @ts-ignore\r\n            this.searchBox.current.focus();\r\n        }\r\n    }\r\n\r\n    onSelectItem(item) {\r\n        const { selectedValues } = this.state;\r\n        const { selectionLimit, onSelect, singleSelect, showCheckbox } = this.props;\r\n        if (!this.state.keepSearchTerm){\r\n            this.setState({\r\n                inputValue: ''\r\n            });\r\n        }\r\n        if (singleSelect) {\r\n            this.onSingleSelect(item);\r\n            onSelect([item], item);\r\n            return;\r\n        }\r\n        if (this.isSelectedValue(item)) {\r\n            this.onRemoveSelectedItem(item);\r\n            return;\r\n        }\r\n        if (selectionLimit == selectedValues.length) {\r\n            return;\r\n        }\r\n        selectedValues.push(item);\r\n        onSelect(selectedValues, item);\r\n        this.setState({ selectedValues }, () => {\r\n            if (!showCheckbox) {\r\n                this.removeSelectedValuesFromOptions(true);\r\n            } else {\r\n                this.filterOptionsByInput();\r\n            }\r\n        });\r\n        if (!this.props.closeOnSelect) {\r\n            // @ts-ignore\r\n            this.searchBox.current.focus();\r\n        }\r\n    }\r\n\r\n    onSingleSelect(item) {\r\n        this.setState({ selectedValues: [item], toggleOptionsList: false });\r\n    }\r\n\r\n    isSelectedValue(item) {\r\n        const { isObject, displayValue } = this.props;\r\n        const { selectedValues } = this.state;\r\n        if (isObject) {\r\n            return (\r\n                selectedValues.filter(i => i[displayValue] === item[displayValue])\r\n                    .length > 0\r\n            );\r\n        }\r\n        return selectedValues.filter(i => i === item).length > 0;\r\n    }\r\n\r\n    renderOptionList() {\r\n        const { groupBy, style, emptyRecordMsg, loading, loadingMessage = 'loading...' } = this.props;\r\n        const { options } = this.state;\r\n        if (loading) {\r\n            return (\r\n                <ul className={`optionContainer`} style={style['optionContainer']}>\r\n                    {typeof loadingMessage === 'string' && <span style={style['loadingMessage']} className={`notFound`}>{loadingMessage}</span>}\r\n                    {typeof loadingMessage !== 'string' && loadingMessage}\r\n                </ul>\r\n            );\r\n        }\r\n        return (\r\n            <ul className={`optionContainer`} style={style['optionContainer']}>\r\n                {options.length === 0 && <span style={style['notFound']} className={`notFound`}>{emptyRecordMsg}</span>}\r\n                {!groupBy ? this.renderNormalOption() : this.renderGroupByOptions()}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    renderGroupByOptions() {\r\n        const { isObject = false, displayValue, showCheckbox, style, singleSelect } = this.props;\r\n        const { groupedObject } = this.state;\r\n        return Object.keys(groupedObject).map(obj => {\r\n            const isSelected = this.isSelectedValue(option);\r\n            return (\r\n                <React.Fragment key={obj}>\r\n                    <li className=\"groupHeading\" style={style['groupHeading']}>{obj}</li>\r\n                    {groupedObject[obj].map((option, i) => (\r\n                        <li\r\n                            key={`option${i}`}\r\n                            style={style['option']}\r\n                            className={`groupChildEle option ${isSelected ? 'selected' : ''} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`}\r\n                            onClick={() => this.onSelectItem(option)}\r\n                        >\r\n                            {showCheckbox && !singleSelect && (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className={'checkbox'}\r\n                                    readOnly\r\n                                    checked={isSelected}\r\n                                />\r\n                            )}\r\n                            {isObject ? option[displayValue] : (option || '').toString()}\r\n                        </li>\r\n                    ))}\r\n                </React.Fragment>\r\n            )\r\n        });\r\n    }\r\n\r\n    renderNormalOption() {\r\n        const { isObject = false, displayValue, showCheckbox, style, singleSelect } = this.props;\r\n        const { highlightOption } = this.state;\r\n        return this.state.options.map((option, i) => {\r\n            const isSelected = this.isSelectedValue(option);\r\n            return (\r\n                <li\r\n                    key={`option${i}`}\r\n                    style={style['option']}\r\n                    className={`option ${isSelected ? 'selected' : ''} ${highlightOption === i ? `highlightOption highlight` : \"\"} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`}\r\n                    onClick={() => this.onSelectItem(option)}\r\n                >\r\n                    {showCheckbox && !singleSelect && (\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            readOnly\r\n                            className={`checkbox`}\r\n                            checked={isSelected}\r\n                        />\r\n                    )}\r\n                    {isObject ? option[displayValue] : (option || '').toString()}\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    renderSelectedList() {\r\n        const { isObject = false, displayValue, style, singleSelect, customCloseIcon } = this.props;\r\n        const { selectedValues, closeIconType } = this.state;\r\n        return selectedValues.map((value, index) => (\r\n            <span className={`chip  ${singleSelect && 'singleChip'} ${this.isDisablePreSelectedValues(value) && 'disableSelection'}`} key={index} style={style['chips']}>\r\n        {!isObject ? (value || '').toString() : value[displayValue]}\r\n                {!this.isDisablePreSelectedValues(value) && (!customCloseIcon ? <img\r\n                    className=\"icon_cancel closeIcon\"\r\n                    src={closeIconType}\r\n                    onClick={() => this.onRemoveSelectedItem(value)}\r\n                /> : <i className=\"custom-close\" onClick={() => this.onRemoveSelectedItem(value)}>{customCloseIcon}</i>)}\r\n      </span>\r\n        ));\r\n    }\r\n\r\n    isDisablePreSelectedValues(value) {\r\n        const { isObject, disablePreSelectedValues, displayValue } = this.props;\r\n        const { preSelectedValues } = this.state;\r\n        if (!disablePreSelectedValues || !preSelectedValues.length) {\r\n            return false;\r\n        }\r\n        if (isObject) {\r\n            return (\r\n                preSelectedValues.filter(i => i[displayValue] === value[displayValue])\r\n                    .length > 0\r\n            );\r\n        }\r\n        return preSelectedValues.filter(i => i === value).length > 0;\r\n    }\r\n\r\n    fadeOutSelection(item) {\r\n        const { selectionLimit, showCheckbox, singleSelect } = this.props;\r\n        if (singleSelect) {\r\n            return;\r\n        }\r\n        const { selectedValues } = this.state;\r\n        if (selectionLimit == -1) {\r\n            return false;\r\n        }\r\n        if (selectionLimit != selectedValues.length) {\r\n            return false;\r\n        }\r\n        if (selectionLimit == selectedValues.length) {\r\n            if (!showCheckbox) {\r\n                return true;\r\n            } else {\r\n                if (this.isSelectedValue(item)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggelOptionList() {\r\n        this.setState({\r\n            toggleOptionsList: !this.state.toggleOptionsList,\r\n            highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0\r\n        });\r\n    }\r\n\r\n    onCloseOptionList() {\r\n        this.setState({\r\n            toggleOptionsList: false,\r\n            highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0,\r\n            inputValue: ''\r\n        });\r\n    }\r\n\r\n    onFocus(){\r\n        if (this.state.toggleOptionsList) {\r\n            // @ts-ignore\r\n            clearTimeout(this.optionTimeout);\r\n        } else {\r\n            this.toggelOptionList();\r\n        }\r\n    }\r\n\r\n    onBlur(){\r\n        this.setState({ inputValue: '' });\r\n        // @ts-ignore\r\n        this.optionTimeout = setTimeout(this.onCloseOptionList, 250);\r\n    }\r\n\r\n    isVisible(elem) {\r\n        return !!elem && !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length )\r\n    }\r\n\r\n    hideOnClickOutside() {\r\n        const element = document.getElementsByClassName('multiselect-container')[0];\r\n        const outsideClickListener = event => {\r\n            if (element && !element.contains(event.target) && this.isVisible(element)) {\r\n                this.toggelOptionList();\r\n            }\r\n        }\r\n        document.addEventListener('click', outsideClickListener)\r\n    }\r\n\r\n    renderMultiselectContainer() {\r\n        const { inputValue, toggleOptionsList, selectedValues } = this.state;\r\n        const { placeholder, style, singleSelect, id, hidePlaceholder, disable, showArrow, className, customArrow } = this.props;\r\n        return (\r\n            <div className={`multiselect-container multiSelectContainer ${disable ? `disable_ms` : ''} ${className || ''}`} id={id || 'multiselectContainerReact'} style={style['multiselectContainer']}>\r\n                <div className={`search-wrapper searchWrapper ${singleSelect ? 'singleSelect' : ''}`}\r\n                     ref={this.searchWrapper} style={style['searchBox']}\r\n                     onClick={singleSelect ? this.toggelOptionList : () => {}}\r\n                >\r\n                    {this.renderSelectedList()}\r\n                    <input\r\n                        type=\"text\"\r\n                        ref={this.searchBox}\r\n                        className=\"searchBox\"\r\n                        id={`${id || 'search'}_input`}\r\n                        onChange={this.onChange}\r\n                        onKeyPress={this.onKeyPress}\r\n                        value={inputValue}\r\n                        onFocus={this.onFocus}\r\n                        onBlur={this.onBlur}\r\n                        placeholder={((singleSelect && selectedValues.length) || (hidePlaceholder && selectedValues.length)) ? '' : placeholder}\r\n                        onKeyDown={this.onArrowKeyNavigation}\r\n                        style={style['inputField']}\r\n                        autoComplete=\"off\"\r\n                        disabled={singleSelect || disable}\r\n                    />\r\n                    {(singleSelect || showArrow) && (\r\n                        <>\r\n                            {customArrow ? <span className=\"icon_down_dir\">{customArrow}</span> : <img src={DownArrow} className={`icon_cancel icon_down_dir`} />}\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div\r\n                    className={`optionListContainer ${\r\n                        toggleOptionsList ? 'displayBlock' : 'displayNone'\r\n                    }`}\r\n                    onMouseDown={(e) => {\r\n                        e.preventDefault();\r\n                    }}\r\n                >\r\n                    {this.renderOptionList()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <OutsideAlerter outsideClick={this.onCloseOptionList}>\r\n                {this.renderMultiselectContainer()}\r\n            </OutsideAlerter>\r\n        );\r\n    }\r\n}\r\n\r\nMultiselect.defaultProps = {\r\n    options: [],\r\n    disablePreSelectedValues: false,\r\n    selectedValues: [],\r\n    isObject: true,\r\n    displayValue: \"model\",\r\n    showCheckbox: false,\r\n    selectionLimit: -1,\r\n    placeholder: \"Select\",\r\n    groupBy: \"\",\r\n    style: {},\r\n    emptyRecordMsg: \"No Options Available\",\r\n    onSelect: () => {},\r\n    onRemove: () => {},\r\n    onKeyPressFn: () => {},\r\n    closeIcon: 'circle2',\r\n    singleSelect: false,\r\n    caseSensitiveSearch: false,\r\n    id: '',\r\n    closeOnSelect: true,\r\n    avoidHighlightFirstOption: false,\r\n    hidePlaceholder: false,\r\n    showArrow: false,\r\n    keepSearchTerm: false,\r\n    customCloseIcon: '',\r\n    className: '',\r\n    customArrow: undefined\r\n};"]},"metadata":{},"sourceType":"module"}