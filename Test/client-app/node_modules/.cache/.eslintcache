[{"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\index.js":"1","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\App.js":"2","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\reportWebVitals.js":"3","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Muscle.js":"4","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Home.js":"5","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Exercise.js":"6","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Nav.js":"7","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\Variables.js":"8","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Selects\\MuscleSelect.js":"9","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\DisplayMuscle.js":"10"},{"size":500,"mtime":1639490904336,"results":"11","hashOfConfig":"12"},{"size":822,"mtime":1639698746486,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1639490904436,"results":"14","hashOfConfig":"12"},{"size":9188,"mtime":1639711538351,"results":"15","hashOfConfig":"12"},{"size":366,"mtime":1639710369648,"results":"16","hashOfConfig":"12"},{"size":11512,"mtime":1639701104551,"results":"17","hashOfConfig":"12"},{"size":1927,"mtime":1639710516376,"results":"18","hashOfConfig":"12"},{"size":205,"mtime":1639594278058,"results":"19","hashOfConfig":"12"},{"size":2223,"mtime":1639663357978,"results":"20","hashOfConfig":"12"},{"size":3608,"mtime":1639702814028,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"otu9z6",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45","usedDeprecatedRules":"24"},"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\index.js",[],["46","47"],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\App.js",[],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\reportWebVitals.js",[],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Muscle.js",[],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Home.js",[],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Exercise.js",["48"],"import React, {Component} from \"react\";\r\nimport {variables} from \"../Variables\";\r\nimport MuscleMultiSelect from \"./Selects/MuscleSelect\";\r\n\r\n\r\nexport class Exercise extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            muscles: [], thisTitle: \"NotChanging\", Name: \"\", selectedOptions: [], Id: 0, exercises: []\r\n        }\r\n    }\r\n\r\n\r\n    refreshList() {\r\n        fetch(variables.EXERCISE_API_URL)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({exercises: data}))\r\n\r\n        fetch(variables.MUSCLE_API_URL)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({muscles: data}))\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshList();\r\n        document.getElementById(\"sex\").style.visibility = \"hidden\";\r\n    }\r\n\r\n    changeMuscleName = (e) => {\r\n        this.setState({Name: e.target.value});\r\n    }\r\n\r\n\r\n    onChangeSelect(e) {\r\n        this.setState({selectedOptions: e.map(z => z.value)})\r\n    }\r\n\r\n\r\n    addClick() {\r\n        this.setState({\r\n            thisTitle: \"Add Exercise\", Id: 0, Name: \"\", selectedOptions: []\r\n        });\r\n    }\r\n\r\n    editClick(exercise) {\r\n        this.setState({\r\n            thisTitle: \"Edit Exercise\", Id: exercise.Id, Name: exercise.Name, selectedOptions: exercise.MusclesTrained\r\n        });\r\n    }\r\n\r\n    createClick() {\r\n        console.log(this.state.Name)\r\n        console.log(this.state.selectedOptions)\r\n        fetch(variables.EXERCISE_API_URL, {\r\n            method: 'POST', headers: {\r\n                'Accept': 'application/json', 'Content-Type': 'application/json'\r\n            }, body: JSON.stringify({\r\n                Name: this.state.Name, musclesIdList: this.state.selectedOptions\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                console.log(result)\r\n                this.refreshList()\r\n            }, (error) => {\r\n                console.log(error)\r\n                this.refreshList()\r\n            })\r\n\r\n    }\r\n\r\n\r\n    updateClick() {\r\n        // console.log(this.state.Id)\r\n        // console.log(this.state.Name)\r\n        // console.log(this.state.selectedOptions)\r\n        fetch(variables.EXERCISE_API_URL + \"/\" + this.state.Id, {\r\n            method: 'PUT', headers: {\r\n                'Accept': 'application/json', 'Content-Type': 'application/json'\r\n            }, body: JSON.stringify({\r\n                Id: this.state.Id, Name: this.state.Name, MusclesIdList: this.state.selectedOptions\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                console.log(\"Succes MDF \" + result)\r\n                this.refreshList()\r\n            }, (error) => {\r\n                this.refreshList()\r\n                console.log(\"eRROR MDF \" + error)\r\n            })\r\n    }\r\n\r\n\r\n    deleteClick(id) {\r\n        if (window.confirm(\"Are you sure?\")) {\r\n            fetch(variables.EXERCISE_API_URL + \"/\" + id, {\r\n                method: 'DELETE', headers: {\r\n                    'Accept': 'application/json', 'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then((result) => {\r\n                    console.log(\"Succes MDF \" + result)\r\n                    this.refreshList()\r\n                }, (error) => {\r\n                    this.refreshList()\r\n                    console.log(\"eRROR MDF \" + error)\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    convertOptions(data) {\r\n        let options = [];\r\n        data.map(function (element) {\r\n            let dict = {value: element.Id, label: element.Name,}\r\n            return options.push(dict)\r\n        });\r\n        return options;\r\n    }\r\n\r\n    convertDefaultValues(data, muscles) {\r\n        let result = data.filter(o1 => !muscles.some(o2 => o1.id === o2.id))\r\n        let options = []\r\n        result.map(function (element) {\r\n            let dict = {label: element.Name, value: element.Id}\r\n            return options.push(dict)\r\n        });\r\n        return options;\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            muscles, Id, thisTitle, Name, exercises, selectedOptions\r\n        } = this.state\r\n        return (\r\n\r\n            <div>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-primary m-2 float-end\"\r\n                        data-bs-toggle=\"modal\"\r\n                        data-bs-target=\"#exampleModal\"\r\n                        onClick={() => this.addClick()}>\r\n                    Add Muscle\r\n                </button>\r\n                <h3 className=\"d-flex justify-content-center m-3\">Exercise Page</h3>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>\r\n                            ID\r\n                        </th>\r\n                        <th>\r\n                            Name\r\n                        </th>\r\n                        <th>\r\n                            Muscles Trained\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {exercises.map(exercise => <tr key={exercise.Id}>\r\n                        <td>{exercise.Id}</td>\r\n                        <td>{exercise.Name}</td>\r\n                        <td>{exercise.MusclesTrained.map(function (muscle) {\r\n                            if (exercise.MusclesTrained.indexOf(muscle) !== exercise.MusclesTrained.length - 1) {\r\n                                return muscle.Name + \", \"\r\n                            } else {\r\n                                return muscle.Name\r\n                            }\r\n                        })}</td>\r\n                        <td>\r\n                            <button type='button'\r\n                                    className=\"btn btn-light mr-1\"\r\n                                    data-bs-toggle=\"modal\"\r\n                                    data-bs-target=\"#exampleModal\"\r\n                                    onClick={() => this.editClick(exercise)}>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\r\n                                     className=\"bi bi-pencil-square\" viewBox=\"0 0 16 16\">\r\n                                    <path\r\n                                        d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/>\r\n                                    <path fillRule=\"evenodd\"\r\n                                          d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/>\r\n                                </svg>\r\n                            </button>\r\n\r\n                            <button type='button'\r\n                                    className=\"btn btn-light mr-1\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\r\n                                     onClick={() => this.deleteClick(exercise.Id)}\r\n                                     className=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\r\n\r\n                                    <path\r\n                                        d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"/>\r\n                                </svg>\r\n                            </button>\r\n                        </td>\r\n                    </tr>)}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog modal-lg modal-dialog-centered\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">{thisTitle}</h5>\r\n                                <button type=\"button\"\r\n                                        className=\"btn-close\"\r\n                                        data-bs-dismiss=\"modal\"\r\n                                        aria-label=\"Close\">\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"input-group mb-3\">\r\n                                    <span className=\"input-group-text\">Name</span>\r\n                                    <input type=\"text\" className=\"form-control\"\r\n                                           value={Name}\r\n                                           onChange={this.changeMuscleName}/>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"input-group mb-3\">\r\n                                    <span className=\"input-group-text\">Muscle</span>\r\n                                    <div className=\"col-md-auto\">\r\n\r\n                                        {/*<CustomSelect*/}\r\n                                        {/*    options={this.convertOptions(muscles)}*/}\r\n                                        {/*    selectedOption={selectedOptions}*/}\r\n                                        {/*    className=\"form-control\"*/}\r\n                                        {/*    isMulti={true}*/}\r\n                                        {/*    defaultValue = {this.convertOptions(muscles)[0]}*/}\r\n                                        {/*    onChange={this.onChangeSelect.bind(this)}/>*/}\r\n\r\n\r\n                                        <MuscleMultiSelect\r\n                                            options={this.convertOptions(muscles)}\r\n                                            selectedOption={this.convertOptions(muscles)[0]}\r\n                                            className=\"form-control\"\r\n                                            isMulti={true}\r\n                                            defaultValue = {this.convertOptions(muscles)[0]}\r\n                                            onChange={this.onChangeSelect.bind(this)}/>\r\n                                        \r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"col-md-auto\">\r\n                                    {Id === 0 ? <button type=\"button\"\r\n                                                        className=\"btn btn-primary float-start\"\r\n                                                        onClick={() => this.createClick()}\r\n                                    >Create</button> : null}\r\n\r\n                                    {Id !== 0 ? <button type=\"button\"\r\n                                                        onClick={() => this.updateClick()}\r\n                                                        className=\"btn btn-primary float-start\">Update</button> : null}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n    }\r\n}","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Nav.js",[],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\Variables.js",[],"D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\Selects\\MuscleSelect.js",["49"],"﻿import React from \"react\";\r\nimport CreatableSelect from \"react-select\";\r\nimport {components} from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport {useState} from \"react\";\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst Menu = props => {\r\n    const optionSelectedLength = props.getValue().length || 0;\r\n    return (<components.Menu {...props}>\r\n            {optionSelectedLength < 5 ? (props.children) : (<div style={{margin: 15}}>Max limit achieved</div>)}\r\n        </components.Menu>);\r\n};\r\n\r\nfunction MuscleMultiSelect(props) {\r\n    const isValidNewOption = (inputValue, selectValue) => inputValue.length > 0 && selectValue.length < 5;\r\n    // const [values, setValues] = useState([{value: 2, label: 'Deltoids'}, {value: 3, label: 'Sex'}])\r\n    // debugger;\r\n\r\n    const [values, setValues] = useState([])\r\n    // const [values, setValues] = useState([\"laba\", \"sex\"])\r\n    const changeHandler = (e) => {\r\n        console.log(\"New Event\")\r\n        console.log(\"-------------------------------\")\r\n\r\n\r\n        console.log(\"The Event is: \")\r\n        console.log(e)\r\n        console.log()\r\n        console.log()\r\n        console.log()\r\n        console.log(\"The Values before setValue are: \")\r\n        console.log(values)\r\n        console.log()\r\n        console.log()\r\n        console.log()\r\n        setValues(e);\r\n        console.log(\"The Values after setValue are: \")\r\n        setTimeout(function () {\r\n            console.log(values)\r\n        }, 1000);\r\n        console.log()\r\n        console.log()\r\n        console.log()\r\n\r\n        // setTimeout(function () {\r\n        //     console.log(\"VALUES:\" + [...values[0]])\r\n        // }, 1000);\r\n        // setValues([...values, e.target.value]);\r\n\r\n        props.onChange(e)\r\n    }\r\n    return (<div className=\"App\">\r\n            <CreatableSelect\r\n                components={{Menu, animatedComponents}}\r\n                isValidNewOption={isValidNewOption}\r\n                isMulti={props.isMulti}\r\n                onChange={changeHandler}\r\n                options={props.options}\r\n                selected = {props.selectedOption}\r\n                value={values}\r\n            />\r\n        </div>);\r\n}\r\n\r\n\r\nexport default MuscleMultiSelect\r\n\r\n","D:\\CodeCool\\TW3\\Test\\Test\\client-app\\src\\components\\DisplayMuscle.js",["50","51","52"],"﻿import React, {Component, useState} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nexport class DisplayMuscle extends Component {\r\n    \r\n    componentDidMount() {\r\n        document.getElementById(\"sex\").style.visibility = \"visible\";\r\n        document.querySelectorAll(\".muscle-groups svg g g[id]\").forEach(function (group) {\r\n\r\n            // For the hover\r\n            group.addEventListener('mouseover', function (el) {\r\n                let id = el.path[1].id.toLowerCase()\r\n                if (!id) id = el.path[2].id.toLowerCase()\r\n                let label = document.querySelectorAll(\"label[for=\" + id + \"]\")[0]\r\n                if (label.classList)\r\n                    label.classList.add(\"hover\")\r\n                else\r\n                    label.className += ' ' + \"hover\"\r\n            })\r\n            group.addEventListener('mouseout', function (el) {\r\n                let id = el.path[1].id.toLowerCase()\r\n                if (!id) id = el.path[2].id.toLowerCase()\r\n                let label = document.querySelectorAll(\"label[for=\" + id + \"]\")[0]\r\n                let clss = \"hover\"\r\n                if (label.classList)\r\n                    label.classList.remove(clss)\r\n                else\r\n                    label.className = label.className.replace(new RegExp('(^|\\\\b)' + clss.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ')\r\n            })\r\n            // For the click\r\n            group.addEventListener('click', function (el) {\r\n                let id = el.path[1].id.toLowerCase()\r\n                if (!id) id = el.path[2].id.toLowerCase()\r\n                let input = document.getElementById(id)\r\n                input.checked = !input.checked\r\n            });\r\n        })\r\n\r\n        let button = document.getElementById('train-button');\r\n        button.addEventListener('click', function () {\r\n            GetSelectedData()\r\n        })\r\n\r\n        function SendData(list) {\r\n\r\n            // $.ajax({\r\n            //     url: \"/Exercise/Test\",\r\n            //     type: \"POST\",\r\n            //     data: JSON.stringify(list),\r\n            //     success: function (mydata) {\r\n            //         window.location.href = \"/Exercise/Test\"\r\n            //     },\r\n            //     error: function (error) {\r\n            //         // console.log(error)\r\n            //         alert('failed, error ' + error.status);\r\n            //     }\r\n            // });\r\n            console.log(list)\r\n\r\n        }\r\n        \r\n        function convertNamesIntoIds(list){\r\n            const muscleDictionary = {\r\n                'biceps' : 1,\r\n                'deltoids': 2,\r\n                'forearms':3,\r\n                'triceps':4,\r\n                'trapezius':5,\r\n                'lats':6,\r\n                'abs':7,\r\n                'obliques':8,\r\n                'pectorals':9,\r\n                'adductors':10,\r\n                'calves':11,\r\n                'hamstrings':12,\r\n                'glutes':13,\r\n                'quads':14\r\n            }\r\n            let convertedList = [];\r\n            list.forEach(el => convertedList.push(muscleDictionary[el]))\r\n            console.log(convertedList)\r\n            return list\r\n        }\r\n\r\n        function GetSelectedData() {\r\n            const query = $('input[type=checkbox]:checked').map(function () {\r\n                return this.id;\r\n            }).get();\r\n            let converted = convertNamesIntoIds(query)\r\n            SendData(converted)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3 className=\"d-flex justify-content-center m-3\">Display Muscle</h3>\r\n            </div>)\r\n    }\r\n}\r\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":138,"column":54,"nodeType":"59","messageId":"60","endLine":138,"endColumn":69},{"ruleId":"61","severity":1,"message":"62","line":1,"column":1,"nodeType":"63","messageId":"64","fix":"65"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":1,"nodeType":"63","messageId":"64","fix":"66"},{"ruleId":"57","severity":1,"message":"67","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":35},{"ruleId":"68","severity":1,"message":"69","line":18,"column":44,"nodeType":"70","messageId":"71","endLine":18,"endColumn":45},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'selectedOptions' is assigned a value but never used.","Identifier","unusedVar","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"74","text":"75"},{"range":"76","text":"75"},"'useState' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0]]