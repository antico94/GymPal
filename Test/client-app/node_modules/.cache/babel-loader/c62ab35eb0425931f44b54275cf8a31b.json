{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeCool\\\\TW3\\\\Test\\\\Test\\\\client-app\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Home extends Component {\n  componentDidMount() {\n    const program = new ShaderProgram(document.querySelector('.particles'));\n    const positions = [],\n          colors = [];\n\n    for (var i = 0; i < 1000; i++) {\n      positions.push(-60 + Math.random() * 120, -60 + Math.random() * 120, -50 + Math.random() * 100);\n      colors.push(0, 0.5, 1, 0.5);\n    }\n\n    program.buffers.position = positions;\n    program.buffers.color = colors;\n  }\n\n  render() {\n    document.getElementById(\"sex\").style.visibility = \"hidden\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"d-flex justify-content-center m-3\",\n        children: \"Home Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nexport class ShaderProgram {\n  constructor(holder) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = Object.assign({\n      antialias: false,\n      depthTest: false,\n      mousemove: false,\n      autosize: true,\n      msaa: 0,\n      vertex: `\n        precision highp float;\n        attribute vec4 a_position;\n        attribute vec4 a_color;\n        uniform float u_time;\n        uniform vec2 u_resolution;\n        uniform vec2 u_mousemove;\n        uniform mat4 u_projection;\n        varying vec4 v_color;\n        void main() {\n          gl_Position = u_projection * a_position;\n          gl_PointSize = (10.0 / gl_Position.w) * 100.0;\n          v_color = a_color;\n        }`,\n      fragment: `\n        precision highp float;\n        uniform sampler2D u_texture;\n        uniform int u_hasTexture;\n        varying vec4 v_color;\n        void main() {\n          if ( u_hasTexture == 1 ) {\n            gl_FragColor = v_color * texture2D(u_texture, gl_PointCoord);\n          } else {\n            gl_FragColor = v_color;\n          }\n        }`,\n      uniforms: {},\n      buffers: {},\n      camera: {},\n      texture: null,\n      onUpdate: () => {},\n      onResize: () => {}\n    }, options);\n    const uniforms = Object.assign({\n      time: {\n        type: 'float',\n        value: 0\n      },\n      hasTexture: {\n        type: 'int',\n        value: 0\n      },\n      resolution: {\n        type: 'vec2',\n        value: [0, 0]\n      },\n      mousemove: {\n        type: 'vec2',\n        value: [0, 0]\n      },\n      projection: {\n        type: 'mat4',\n        value: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n      }\n    }, options.uniforms);\n    const buffers = Object.assign({\n      position: {\n        size: 3,\n        data: []\n      },\n      color: {\n        size: 4,\n        data: []\n      }\n    }, options.buffers);\n    const camera = Object.assign({\n      fov: 60,\n      near: 1,\n      far: 10000,\n      aspect: 1,\n      z: 100,\n      perspective: true\n    }, options.camera);\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl', {\n      antialias: options.antialias\n    });\n    if (!gl) return false;\n    this.count = 0;\n    this.gl = gl;\n    this.canvas = canvas;\n    this.camera = camera;\n    this.holder = holder;\n    this.msaa = options.msaa;\n    this.onUpdate = options.onUpdate;\n    this.onResize = options.onResize;\n    this.data = {};\n    holder.appendChild(canvas);\n    this.createProgram(options.vertex, options.fragment);\n    this.createBuffers(buffers);\n    this.createUniforms(uniforms);\n    this.updateBuffers();\n    this.updateUniforms();\n    this.createTexture(options.texture);\n    gl.enable(gl.BLEND);\n    gl.enable(gl.CULL_FACE);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n    gl[options.depthTest ? 'enable' : 'disable'](gl.DEPTH_TEST);\n    if (options.autosize) window.addEventListener('resize', e => this.resize(e), false);\n    if (options.mousemove) window.addEventListener('mousemove', e => this.mousemove(e), false);\n    this.resize();\n    this.update = this.update.bind(this);\n    this.time = {\n      start: performance.now(),\n      old: performance.now()\n    };\n    this.update();\n  }\n\n  mousemove(e) {\n    let x = e.pageX / this.width * 2 - 1;\n    let y = e.pageY / this.height * 2 - 1;\n    this.uniforms.mousemove = [x, y];\n  }\n\n  resize(e) {\n    const holder = this.holder;\n    const canvas = this.canvas;\n    const gl = this.gl;\n    const width = this.width = holder.offsetWidth;\n    const height = this.height = holder.offsetHeight;\n    const aspect = this.aspect = width / height;\n    const dpi = this.dpi = Math.max(this.msaa ? 2 : 1, devicePixelRatio);\n    canvas.width = width * dpi;\n    canvas.height = height * dpi;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n    gl.viewport(0, 0, width * dpi, height * dpi);\n    gl.clearColor(0, 0, 0, 0);\n    this.uniforms.resolution = [width, height];\n    this.uniforms.projection = this.setProjection(aspect);\n    this.onResize(width, height, dpi);\n  }\n\n  setProjection(aspect) {\n    const camera = this.camera;\n\n    if (camera.perspective) {\n      camera.aspect = aspect;\n      const fovRad = camera.fov * (Math.PI / 180);\n      const f = Math.tan(Math.PI * 0.5 - 0.5 * fovRad);\n      const rangeInv = 1.0 / (camera.near - camera.far);\n      const matrix = [f / camera.aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (camera.near + camera.far) * rangeInv, -1, 0, 0, camera.near * camera.far * rangeInv * 2, 0];\n      matrix[14] += camera.z;\n      matrix[15] += camera.z;\n      return matrix;\n    } else {\n      return [2 / this.width, 0, 0, 0, 0, -2 / this.height, 0, 0, 0, 0, 1, 0, -1, 1, 0, 1];\n    }\n  }\n\n  createShader(type, source) {\n    const gl = this.gl;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      return shader;\n    } else {\n      console.log(gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n    }\n  }\n\n  createProgram(vertex, fragment) {\n    const gl = this.gl;\n    const vertexShader = this.createShader(gl.VERTEX_SHADER, vertex);\n    const fragmentShader = this.createShader(gl.FRAGMENT_SHADER, fragment);\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      gl.useProgram(program);\n      this.program = program;\n    } else {\n      console.log(gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n    }\n  }\n\n  createUniforms(data) {\n    const gl = this.gl;\n    const uniforms = this.data.uniforms = data;\n    const values = this.uniforms = {};\n    Object.keys(uniforms).forEach(name => {\n      const uniform = uniforms[name];\n      uniform.location = gl.getUniformLocation(this.program, 'u_' + name);\n      Object.defineProperty(values, name, {\n        set: value => {\n          uniforms[name].value = value;\n          this.setUniform(name, value);\n        },\n        get: () => uniforms[name].value\n      });\n    });\n  }\n\n  setUniform(name, value) {\n    const gl = this.gl;\n    const uniform = this.data.uniforms[name];\n    uniform.value = value;\n\n    switch (uniform.type) {\n      case 'int':\n        {\n          gl.uniform1i(uniform.location, value);\n          break;\n        }\n\n      case 'float':\n        {\n          gl.uniform1f(uniform.location, value);\n          break;\n        }\n\n      case 'vec2':\n        {\n          gl.uniform2f(uniform.location, ...value);\n          break;\n        }\n\n      case 'vec3':\n        {\n          gl.uniform3f(uniform.location, ...value);\n          break;\n        }\n\n      case 'vec4':\n        {\n          gl.uniform4f(uniform.location, ...value);\n          break;\n        }\n\n      case 'mat2':\n        {\n          gl.uniformMatrix2fv(uniform.location, false, value);\n          break;\n        }\n\n      case 'mat3':\n        {\n          gl.uniformMatrix3fv(uniform.location, false, value);\n          break;\n        }\n\n      case 'mat4':\n        {\n          gl.uniformMatrix4fv(uniform.location, false, value);\n          break;\n        }\n    } // ivec2       : uniform2i,\n    // ivec3       : uniform3i,\n    // ivec4       : uniform4i,\n    // sampler2D   : uniform1i,\n    // samplerCube : uniform1i,\n    // bool        : uniform1i,\n    // bvec2       : uniform2i,\n    // bvec3       : uniform3i,\n    // bvec4       : uniform4i,\n\n  }\n\n  updateUniforms() {\n    const gl = this.gl;\n    const uniforms = this.data.uniforms;\n    Object.keys(uniforms).forEach(name => {\n      const uniform = uniforms[name];\n      this.uniforms[name] = uniform.value;\n    });\n  }\n\n  createBuffers(data) {\n    const gl = this.gl;\n    const buffers = this.data.buffers = data;\n    const values = this.buffers = {};\n    Object.keys(buffers).forEach(name => {\n      const buffer = buffers[name];\n      buffer.buffer = this.createBuffer('a_' + name, buffer.size);\n      Object.defineProperty(values, name, {\n        set: data => {\n          buffers[name].data = data;\n          this.setBuffer(name, data);\n          if (name == 'position') this.count = buffers.position.data.length / 3;\n        },\n        get: () => buffers[name].data\n      });\n    });\n  }\n\n  createBuffer(name, size) {\n    const gl = this.gl;\n    const program = this.program;\n    const index = gl.getAttribLocation(program, name);\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(index);\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\n    return buffer;\n  }\n\n  setBuffer(name, data) {\n    const gl = this.gl;\n    const buffers = this.data.buffers;\n    if (name == null && !gl.bindBuffer(gl.ARRAY_BUFFER, null)) return;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers[name].buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n  }\n\n  updateBuffers() {\n    const gl = this.gl;\n    const buffers = this.buffers;\n    Object.keys(buffers).forEach(name => buffers[name] = buffers.data);\n    this.setBuffer(null);\n  }\n\n  createTexture(src) {\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n    this.texture = texture;\n\n    if (src) {\n      this.uniforms.hasTexture = 1;\n      this.loadTexture(src);\n    }\n  }\n\n  loadTexture(src) {\n    const gl = this.gl;\n    const texture = this.texture;\n    const textureImage = new Image();\n\n    textureImage.onload = () => {\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // gl.generateMipmap( gl.TEXTURE_2D )\n    };\n\n    textureImage.src = src;\n  }\n\n  update() {\n    const gl = this.gl;\n    const now = performance.now();\n    const elapsed = (now - this.time.start) / 5000;\n    const delta = now - this.time.old;\n    this.time.old = now;\n    this.uniforms.time = elapsed;\n\n    if (this.count > 0) {\n      gl.clear(gl.COLORBUFFERBIT);\n      gl.drawArrays(gl.POINTS, 0, this.count);\n    }\n\n    this.onUpdate(delta);\n    requestAnimationFrame(this.update);\n  }\n\n}","map":{"version":3,"sources":["D:/CodeCool/TW3/Test/Test/client-app/src/components/Home.js"],"names":["React","Component","Home","componentDidMount","program","ShaderProgram","document","querySelector","positions","colors","i","push","Math","random","buffers","position","color","render","getElementById","style","visibility","constructor","holder","options","Object","assign","antialias","depthTest","mousemove","autosize","msaa","vertex","fragment","uniforms","camera","texture","onUpdate","onResize","time","type","value","hasTexture","resolution","projection","size","data","fov","near","far","aspect","z","perspective","canvas","createElement","gl","getContext","count","appendChild","createProgram","createBuffers","createUniforms","updateBuffers","updateUniforms","createTexture","enable","BLEND","CULL_FACE","blendFunc","SRC_ALPHA","ONE","DEPTH_TEST","window","addEventListener","e","resize","update","bind","start","performance","now","old","x","pageX","width","y","pageY","height","offsetWidth","offsetHeight","dpi","max","devicePixelRatio","viewport","clearColor","setProjection","fovRad","PI","f","tan","rangeInv","matrix","createShader","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getProgramInfoLog","deleteProgram","values","keys","forEach","name","uniform","location","getUniformLocation","defineProperty","set","setUniform","get","uniform1i","uniform1f","uniform2f","uniform3f","uniform4f","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","buffer","createBuffer","setBuffer","length","index","getAttribLocation","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","src","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","loadTexture","textureImage","Image","onload","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","elapsed","delta","clear","COLORBUFFERBIT","drawArrays","POINTS","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nexport class Home extends Component {\r\n    componentDidMount() {\r\n        const program = new ShaderProgram(document.querySelector('.particles'))\r\n        const positions = [], colors = []\r\n\r\n        for (var i = 0; i < 1000; i++) {\r\n            positions.push(-60 + Math.random() * 120, -60 + Math.random() * 120, -50 + Math.random() * 100)\r\n            colors.push(0, 0.5, 1, 0.5)\r\n        }\r\n\r\n        program.buffers.position = positions\r\n        program.buffers.color = colors\r\n\r\n    }\r\n\r\n    render() {\r\n        document.getElementById(\"sex\").style.visibility = \"hidden\";\r\n        return (<div>\r\n                <h3 className=\"d-flex justify-content-center m-3\">Home Page</h3>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport class ShaderProgram {\r\n\r\n    constructor(holder, options = {}) {\r\n\r\n        options = Object.assign({\r\n            antialias: false, depthTest: false, mousemove: false, autosize: true, msaa: 0, vertex: `\r\n        precision highp float;\r\n        attribute vec4 a_position;\r\n        attribute vec4 a_color;\r\n        uniform float u_time;\r\n        uniform vec2 u_resolution;\r\n        uniform vec2 u_mousemove;\r\n        uniform mat4 u_projection;\r\n        varying vec4 v_color;\r\n        void main() {\r\n          gl_Position = u_projection * a_position;\r\n          gl_PointSize = (10.0 / gl_Position.w) * 100.0;\r\n          v_color = a_color;\r\n        }`, fragment: `\r\n        precision highp float;\r\n        uniform sampler2D u_texture;\r\n        uniform int u_hasTexture;\r\n        varying vec4 v_color;\r\n        void main() {\r\n          if ( u_hasTexture == 1 ) {\r\n            gl_FragColor = v_color * texture2D(u_texture, gl_PointCoord);\r\n          } else {\r\n            gl_FragColor = v_color;\r\n          }\r\n        }`, uniforms: {}, buffers: {}, camera: {}, texture: null, onUpdate: (() => {\r\n            }), onResize: (() => {\r\n            }),\r\n        }, options)\r\n\r\n        const uniforms = Object.assign({\r\n            time: {type: 'float', value: 0},\r\n            hasTexture: {type: 'int', value: 0},\r\n            resolution: {type: 'vec2', value: [0, 0]},\r\n            mousemove: {type: 'vec2', value: [0, 0]},\r\n            projection: {type: 'mat4', value: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]},\r\n        }, options.uniforms)\r\n\r\n        const buffers = Object.assign({\r\n            position: {size: 3, data: []}, color: {size: 4, data: []},\r\n        }, options.buffers)\r\n\r\n        const camera = Object.assign({\r\n            fov: 60, near: 1, far: 10000, aspect: 1, z: 100, perspective: true,\r\n        }, options.camera)\r\n\r\n        const canvas = document.createElement('canvas')\r\n        const gl = canvas.getContext('webgl', {antialias: options.antialias})\r\n\r\n        if (!gl) return false\r\n\r\n        this.count = 0\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.camera = camera\r\n        this.holder = holder\r\n        this.msaa = options.msaa\r\n        this.onUpdate = options.onUpdate\r\n        this.onResize = options.onResize\r\n        this.data = {}\r\n\r\n        holder.appendChild(canvas)\r\n\r\n        this.createProgram(options.vertex, options.fragment)\r\n\r\n        this.createBuffers(buffers)\r\n        this.createUniforms(uniforms)\r\n\r\n        this.updateBuffers()\r\n        this.updateUniforms()\r\n\r\n        this.createTexture(options.texture)\r\n\r\n        gl.enable(gl.BLEND)\r\n        gl.enable(gl.CULL_FACE)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE)\r\n        gl[options.depthTest ? 'enable' : 'disable'](gl.DEPTH_TEST)\r\n\r\n        if (options.autosize) window.addEventListener('resize', e => this.resize(e), false)\r\n        if (options.mousemove) window.addEventListener('mousemove', e => this.mousemove(e), false)\r\n\r\n        this.resize()\r\n\r\n        this.update = this.update.bind(this)\r\n        this.time = {start: performance.now(), old: performance.now()}\r\n        this.update()\r\n\r\n    }\r\n\r\n    mousemove(e) {\r\n\r\n        let x = e.pageX / this.width * 2 - 1\r\n        let y = e.pageY / this.height * 2 - 1\r\n\r\n        this.uniforms.mousemove = [x, y]\r\n\r\n    }\r\n\r\n    resize(e) {\r\n\r\n        const holder = this.holder\r\n        const canvas = this.canvas\r\n        const gl = this.gl\r\n\r\n        const width = this.width = holder.offsetWidth\r\n        const height = this.height = holder.offsetHeight\r\n        const aspect = this.aspect = width / height\r\n        const dpi = this.dpi = Math.max(this.msaa ? 2 : 1, devicePixelRatio)\r\n\r\n        canvas.width = width * dpi\r\n        canvas.height = height * dpi\r\n        canvas.style.width = width + 'px'\r\n        canvas.style.height = height + 'px'\r\n\r\n        gl.viewport(0, 0, width * dpi, height * dpi)\r\n        gl.clearColor(0, 0, 0, 0)\r\n\r\n        this.uniforms.resolution = [width, height]\r\n        this.uniforms.projection = this.setProjection(aspect)\r\n\r\n        this.onResize(width, height, dpi)\r\n\r\n    }\r\n\r\n    setProjection(aspect) {\r\n\r\n        const camera = this.camera\r\n\r\n        if (camera.perspective) {\r\n\r\n            camera.aspect = aspect\r\n\r\n            const fovRad = camera.fov * (Math.PI / 180)\r\n            const f = Math.tan(Math.PI * 0.5 - 0.5 * fovRad)\r\n            const rangeInv = 1.0 / (camera.near - camera.far)\r\n\r\n            const matrix = [f / camera.aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (camera.near + camera.far) * rangeInv, -1, 0, 0, camera.near * camera.far * rangeInv * 2, 0]\r\n\r\n            matrix[14] += camera.z\r\n            matrix[15] += camera.z\r\n\r\n            return matrix\r\n\r\n        } else {\r\n\r\n            return [2 / this.width, 0, 0, 0, 0, -2 / this.height, 0, 0, 0, 0, 1, 0, -1, 1, 0, 1,]\r\n\r\n        }\r\n\r\n    }\r\n\r\n    createShader(type, source) {\r\n\r\n        const gl = this.gl\r\n        const shader = gl.createShader(type)\r\n\r\n        gl.shaderSource(shader, source)\r\n        gl.compileShader(shader)\r\n\r\n        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\r\n            return shader\r\n\r\n        } else {\r\n\r\n            console.log(gl.getShaderInfoLog(shader))\r\n            gl.deleteShader(shader)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    createProgram(vertex, fragment) {\r\n\r\n        const gl = this.gl\r\n\r\n        const vertexShader = this.createShader(gl.VERTEX_SHADER, vertex)\r\n        const fragmentShader = this.createShader(gl.FRAGMENT_SHADER, fragment)\r\n\r\n        const program = gl.createProgram()\r\n\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n\r\n            gl.useProgram(program)\r\n            this.program = program\r\n\r\n        } else {\r\n\r\n            console.log(gl.getProgramInfoLog(program))\r\n            gl.deleteProgram(program)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    createUniforms(data) {\r\n\r\n        const gl = this.gl\r\n        const uniforms = this.data.uniforms = data\r\n        const values = this.uniforms = {}\r\n\r\n        Object.keys(uniforms).forEach(name => {\r\n\r\n            const uniform = uniforms[name]\r\n\r\n            uniform.location = gl.getUniformLocation(this.program, 'u_' + name)\r\n\r\n            Object.defineProperty(values, name, {\r\n                set: value => {\r\n\r\n                    uniforms[name].value = value\r\n                    this.setUniform(name, value)\r\n\r\n                }, get: () => uniforms[name].value\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    setUniform(name, value) {\r\n\r\n        const gl = this.gl\r\n        const uniform = this.data.uniforms[name]\r\n\r\n        uniform.value = value\r\n\r\n        switch (uniform.type) {\r\n            case 'int': {\r\n                gl.uniform1i(uniform.location, value)\r\n                break\r\n            }\r\n            case 'float': {\r\n                gl.uniform1f(uniform.location, value)\r\n                break\r\n            }\r\n            case 'vec2': {\r\n                gl.uniform2f(uniform.location, ...value)\r\n                break\r\n            }\r\n            case 'vec3': {\r\n                gl.uniform3f(uniform.location, ...value)\r\n                break\r\n            }\r\n            case 'vec4': {\r\n                gl.uniform4f(uniform.location, ...value)\r\n                break\r\n            }\r\n            case 'mat2': {\r\n                gl.uniformMatrix2fv(uniform.location, false, value)\r\n                break\r\n            }\r\n            case 'mat3': {\r\n                gl.uniformMatrix3fv(uniform.location, false, value)\r\n                break\r\n            }\r\n            case 'mat4': {\r\n                gl.uniformMatrix4fv(uniform.location, false, value)\r\n                break\r\n            }\r\n        }\r\n\r\n        // ivec2       : uniform2i,\r\n        // ivec3       : uniform3i,\r\n        // ivec4       : uniform4i,\r\n        // sampler2D   : uniform1i,\r\n        // samplerCube : uniform1i,\r\n        // bool        : uniform1i,\r\n        // bvec2       : uniform2i,\r\n        // bvec3       : uniform3i,\r\n        // bvec4       : uniform4i,\r\n\r\n    }\r\n\r\n    updateUniforms() {\r\n\r\n        const gl = this.gl\r\n        const uniforms = this.data.uniforms\r\n\r\n        Object.keys(uniforms).forEach(name => {\r\n\r\n            const uniform = uniforms[name]\r\n\r\n            this.uniforms[name] = uniform.value\r\n\r\n        })\r\n\r\n    }\r\n\r\n    createBuffers(data) {\r\n\r\n        const gl = this.gl\r\n        const buffers = this.data.buffers = data\r\n        const values = this.buffers = {}\r\n\r\n        Object.keys(buffers).forEach(name => {\r\n\r\n            const buffer = buffers[name]\r\n\r\n            buffer.buffer = this.createBuffer('a_' + name, buffer.size)\r\n\r\n            Object.defineProperty(values, name, {\r\n                set: data => {\r\n\r\n                    buffers[name].data = data\r\n                    this.setBuffer(name, data)\r\n\r\n                    if (name == 'position') this.count = buffers.position.data.length / 3\r\n\r\n                }, get: () => buffers[name].data\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    createBuffer(name, size) {\r\n\r\n        const gl = this.gl\r\n        const program = this.program\r\n\r\n        const index = gl.getAttribLocation(program, name)\r\n        const buffer = gl.createBuffer()\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n        gl.enableVertexAttribArray(index)\r\n        gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0)\r\n\r\n        return buffer\r\n\r\n    }\r\n\r\n    setBuffer(name, data) {\r\n\r\n        const gl = this.gl\r\n        const buffers = this.data.buffers\r\n\r\n        if (name == null && !gl.bindBuffer(gl.ARRAY_BUFFER, null)) return\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers[name].buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)\r\n\r\n    }\r\n\r\n    updateBuffers() {\r\n\r\n        const gl = this.gl\r\n        const buffers = this.buffers\r\n\r\n        Object.keys(buffers).forEach(name => buffers[name] = buffers.data)\r\n\r\n        this.setBuffer(null)\r\n\r\n    }\r\n\r\n    createTexture(src) {\r\n\r\n        const gl = this.gl\r\n        const texture = gl.createTexture()\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]))\r\n\r\n        this.texture = texture\r\n\r\n        if (src) {\r\n\r\n            this.uniforms.hasTexture = 1\r\n            this.loadTexture(src)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    loadTexture(src) {\r\n\r\n        const gl = this.gl\r\n        const texture = this.texture\r\n\r\n        const textureImage = new Image()\r\n\r\n        textureImage.onload = () => {\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, texture)\r\n\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage)\r\n\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\r\n\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n\r\n            // gl.generateMipmap( gl.TEXTURE_2D )\r\n\r\n        }\r\n\r\n        textureImage.src = src\r\n\r\n    }\r\n\r\n    update() {\r\n\r\n        const gl = this.gl\r\n\r\n        const now = performance.now()\r\n        const elapsed = (now - this.time.start) / 5000\r\n        const delta = now - this.time.old\r\n        this.time.old = now\r\n\r\n        this.uniforms.time = elapsed\r\n\r\n        if (this.count > 0) {\r\n            gl.clear(gl.COLORBUFFERBIT)\r\n            gl.drawArrays(gl.POINTS, 0, this.count)\r\n        }\r\n\r\n        this.onUpdate(delta)\r\n\r\n        requestAnimationFrame(this.update)\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}