{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeCool\\\\TW3\\\\Test\\\\Test\\\\client-app\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Home extends Component {\n  componentDidMount() {}\n\n  render() {\n    new Plm();\n    document.getElementById(\"sex\").style.visibility = \"hidden\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"d-flex justify-content-center m-3\",\n        children: \"Home Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport class Plm {\n  constructor(holder) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = Object.assign({\n      antialias: false,\n      depthTest: false,\n      mousemove: false,\n      autosize: true,\n      msaa: 0,\n      vertex: `\n        precision highp float;\n        attribute vec4 a_position;\n        attribute vec4 a_color;\n        uniform float u_time;\n        uniform vec2 u_resolution;\n        uniform vec2 u_mousemove;\n        uniform mat4 u_projection;\n        varying vec4 v_color;\n        void main() {\n          gl_Position = u_projection * a_position;\n          gl_PointSize = (10.0 / gl_Position.w) * 100.0;\n          v_color = a_color;\n        }`,\n      fragment: `\n        precision highp float;\n        uniform sampler2D u_texture;\n        uniform int u_hasTexture;\n        varying vec4 v_color;\n        void main() {\n          if ( u_hasTexture == 1 ) {\n            gl_FragColor = v_color * texture2D(u_texture, gl_PointCoord);\n          } else {\n            gl_FragColor = v_color;\n          }\n        }`,\n      uniforms: {},\n      buffers: {},\n      camera: {},\n      texture: null,\n      onUpdate: () => {},\n      onResize: () => {}\n    }, options);\n    const uniforms = Object.assign({\n      time: {\n        type: 'float',\n        value: 0\n      },\n      hasTexture: {\n        type: 'int',\n        value: 0\n      },\n      resolution: {\n        type: 'vec2',\n        value: [0, 0]\n      },\n      mousemove: {\n        type: 'vec2',\n        value: [0, 0]\n      },\n      projection: {\n        type: 'mat4',\n        value: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n      }\n    }, options.uniforms);\n    const buffers = Object.assign({\n      position: {\n        size: 3,\n        data: []\n      },\n      color: {\n        size: 4,\n        data: []\n      }\n    }, options.buffers);\n    const camera = Object.assign({\n      fov: 60,\n      near: 1,\n      far: 10000,\n      aspect: 1,\n      z: 100,\n      perspective: true\n    }, options.camera);\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl', {\n      antialias: options.antialias\n    });\n    if (!gl) return false;\n    this.count = 0;\n    this.gl = gl;\n    this.canvas = canvas;\n    this.camera = camera;\n    this.holder = holder;\n    this.msaa = options.msaa;\n    this.onUpdate = options.onUpdate;\n    this.onResize = options.onResize;\n    this.data = {};\n    holder.appendChild(canvas);\n    this.createProgram(options.vertex, options.fragment);\n    this.createBuffers(buffers);\n    this.createUniforms(uniforms);\n    this.updateBuffers();\n    this.updateUniforms();\n    this.createTexture(options.texture);\n    gl.enable(gl.BLEND);\n    gl.enable(gl.CULL_FACE);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n    gl[options.depthTest ? 'enable' : 'disable'](gl.DEPTH_TEST);\n    if (options.autosize) window.addEventListener('resize', e => this.resize(e), false);\n    if (options.mousemove) window.addEventListener('mousemove', e => this.mousemove(e), false);\n    this.resize();\n    this.update = this.update.bind(this);\n    this.time = {\n      start: performance.now(),\n      old: performance.now()\n    };\n    this.update();\n  }\n\n  mousemove(e) {\n    let x = e.pageX / this.width * 2 - 1;\n    let y = e.pageY / this.height * 2 - 1;\n    this.uniforms.mousemove = [x, y];\n  }\n\n  resize(e) {\n    const holder = this.holder;\n    const canvas = this.canvas;\n    const gl = this.gl;\n    const width = this.width = holder.offsetWidth;\n    const height = this.height = holder.offsetHeight;\n    const aspect = this.aspect = width / height;\n    const dpi = this.dpi = Math.max(this.msaa ? 2 : 1, devicePixelRatio);\n    canvas.width = width * dpi;\n    canvas.height = height * dpi;\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n    gl.viewport(0, 0, width * dpi, height * dpi);\n    gl.clearColor(0, 0, 0, 0);\n    this.uniforms.resolution = [width, height];\n    this.uniforms.projection = this.setProjection(aspect);\n    this.onResize(width, height, dpi);\n  }\n\n  setProjection(aspect) {\n    const camera = this.camera;\n\n    if (camera.perspective) {\n      camera.aspect = aspect;\n      const fovRad = camera.fov * (Math.PI / 180);\n      const f = Math.tan(Math.PI * 0.5 - 0.5 * fovRad);\n      const rangeInv = 1.0 / (camera.near - camera.far);\n      const matrix = [f / camera.aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (camera.near + camera.far) * rangeInv, -1, 0, 0, camera.near * camera.far * rangeInv * 2, 0];\n      matrix[14] += camera.z;\n      matrix[15] += camera.z;\n      return matrix;\n    } else {\n      return [2 / this.width, 0, 0, 0, 0, -2 / this.height, 0, 0, 0, 0, 1, 0, -1, 1, 0, 1];\n    }\n  }\n\n  createShader(type, source) {\n    const gl = this.gl;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      return shader;\n    } else {\n      console.log(gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n    }\n  }\n\n  createProgram(vertex, fragment) {\n    const gl = this.gl;\n    const vertexShader = this.createShader(gl.VERTEX_SHADER, vertex);\n    const fragmentShader = this.createShader(gl.FRAGMENT_SHADER, fragment);\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      gl.useProgram(program);\n      this.program = program;\n    } else {\n      console.log(gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n    }\n  }\n\n  createUniforms(data) {\n    const gl = this.gl;\n    const uniforms = this.data.uniforms = data;\n    const values = this.uniforms = {};\n    Object.keys(uniforms).forEach(name => {\n      const uniform = uniforms[name];\n      uniform.location = gl.getUniformLocation(this.program, 'u_' + name);\n      Object.defineProperty(values, name, {\n        set: value => {\n          uniforms[name].value = value;\n          this.setUniform(name, value);\n        },\n        get: () => uniforms[name].value\n      });\n    });\n  }\n\n  setUniform(name, value) {\n    const gl = this.gl;\n    const uniform = this.data.uniforms[name];\n    uniform.value = value;\n\n    switch (uniform.type) {\n      case 'int':\n        {\n          gl.uniform1i(uniform.location, value);\n          break;\n        }\n\n      case 'float':\n        {\n          gl.uniform1f(uniform.location, value);\n          break;\n        }\n\n      case 'vec2':\n        {\n          gl.uniform2f(uniform.location, ...value);\n          break;\n        }\n\n      case 'vec3':\n        {\n          gl.uniform3f(uniform.location, ...value);\n          break;\n        }\n\n      case 'vec4':\n        {\n          gl.uniform4f(uniform.location, ...value);\n          break;\n        }\n\n      case 'mat2':\n        {\n          gl.uniformMatrix2fv(uniform.location, false, value);\n          break;\n        }\n\n      case 'mat3':\n        {\n          gl.uniformMatrix3fv(uniform.location, false, value);\n          break;\n        }\n\n      case 'mat4':\n        {\n          gl.uniformMatrix4fv(uniform.location, false, value);\n          break;\n        }\n    } // ivec2       : uniform2i,\n    // ivec3       : uniform3i,\n    // ivec4       : uniform4i,\n    // sampler2D   : uniform1i,\n    // samplerCube : uniform1i,\n    // bool        : uniform1i,\n    // bvec2       : uniform2i,\n    // bvec3       : uniform3i,\n    // bvec4       : uniform4i,\n\n  }\n\n  updateUniforms() {\n    const gl = this.gl;\n    const uniforms = this.data.uniforms;\n    Object.keys(uniforms).forEach(name => {\n      const uniform = uniforms[name];\n      this.uniforms[name] = uniform.value;\n    });\n  }\n\n  createBuffers(data) {\n    const gl = this.gl;\n    const buffers = this.data.buffers = data;\n    const values = this.buffers = {};\n    Object.keys(buffers).forEach(name => {\n      const buffer = buffers[name];\n      buffer.buffer = this.createBuffer('a_' + name, buffer.size);\n      Object.defineProperty(values, name, {\n        set: data => {\n          buffers[name].data = data;\n          this.setBuffer(name, data);\n          if (name == 'position') this.count = buffers.position.data.length / 3;\n        },\n        get: () => buffers[name].data\n      });\n    });\n  }\n\n  createBuffer(name, size) {\n    const gl = this.gl;\n    const program = this.program;\n    const index = gl.getAttribLocation(program, name);\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(index);\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\n    return buffer;\n  }\n\n  setBuffer(name, data) {\n    const gl = this.gl;\n    const buffers = this.data.buffers;\n    if (name == null && !gl.bindBuffer(gl.ARRAY_BUFFER, null)) return;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers[name].buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n  }\n\n  updateBuffers() {\n    const gl = this.gl;\n    const buffers = this.buffers;\n    Object.keys(buffers).forEach(name => buffers[name] = buffers.data);\n    this.setBuffer(null);\n  }\n\n  createTexture(src) {\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));\n    this.texture = texture;\n\n    if (src) {\n      this.uniforms.hasTexture = 1;\n      this.loadTexture(src);\n    }\n  }\n\n  loadTexture(src) {\n    const gl = this.gl;\n    const texture = this.texture;\n    const textureImage = new Image();\n\n    textureImage.onload = () => {\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // gl.generateMipmap( gl.TEXTURE_2D )\n    };\n\n    textureImage.src = src;\n  }\n\n  update() {\n    const gl = this.gl;\n    const now = performance.now();\n    const elapsed = (now - this.time.start) / 5000;\n    const delta = now - this.time.old;\n    this.time.old = now;\n    this.uniforms.time = elapsed;\n\n    if (this.count > 0) {\n      gl.clear(gl.COLORBUFFERBIT);\n      gl.drawArrays(gl.POINTS, 0, this.count);\n    }\n\n    this.onUpdate(delta);\n    requestAnimationFrame(this.update);\n  }\n\n}","map":{"version":3,"sources":["D:/CodeCool/TW3/Test/Test/client-app/src/components/Home.js"],"names":["React","Component","Home","componentDidMount","render","Plm","document","getElementById","style","visibility","constructor","holder","options","Object","assign","antialias","depthTest","mousemove","autosize","msaa","vertex","fragment","uniforms","buffers","camera","texture","onUpdate","onResize","time","type","value","hasTexture","resolution","projection","position","size","data","color","fov","near","far","aspect","z","perspective","canvas","createElement","gl","getContext","count","appendChild","createProgram","createBuffers","createUniforms","updateBuffers","updateUniforms","createTexture","enable","BLEND","CULL_FACE","blendFunc","SRC_ALPHA","ONE","DEPTH_TEST","window","addEventListener","e","resize","update","bind","start","performance","now","old","x","pageX","width","y","pageY","height","offsetWidth","offsetHeight","dpi","Math","max","devicePixelRatio","viewport","clearColor","setProjection","fovRad","PI","f","tan","rangeInv","matrix","createShader","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getProgramInfoLog","deleteProgram","values","keys","forEach","name","uniform","location","getUniformLocation","defineProperty","set","setUniform","get","uniform1i","uniform1f","uniform2f","uniform3f","uniform4f","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","buffer","createBuffer","setBuffer","length","index","getAttribLocation","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","src","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","loadTexture","textureImage","Image","onload","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","elapsed","delta","clear","COLORBUFFERBIT","drawArrays","POINTS","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nexport class Home extends Component{\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render(){\r\n        new Plm()\r\n        document.getElementById(\"sex\").style.visibility = \"hidden\";\r\n        return(\r\n            <div>\r\n                <h3 className=\"d-flex justify-content-center m-3\">Home Page</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport class Plm {\r\n\r\n    constructor( holder, options = {} ) {\r\n\r\n        options = Object.assign( {\r\n            antialias: false,\r\n            depthTest: false,\r\n            mousemove: false,\r\n            autosize: true,\r\n            msaa: 0,\r\n            vertex: `\r\n        precision highp float;\r\n        attribute vec4 a_position;\r\n        attribute vec4 a_color;\r\n        uniform float u_time;\r\n        uniform vec2 u_resolution;\r\n        uniform vec2 u_mousemove;\r\n        uniform mat4 u_projection;\r\n        varying vec4 v_color;\r\n        void main() {\r\n          gl_Position = u_projection * a_position;\r\n          gl_PointSize = (10.0 / gl_Position.w) * 100.0;\r\n          v_color = a_color;\r\n        }`,\r\n            fragment: `\r\n        precision highp float;\r\n        uniform sampler2D u_texture;\r\n        uniform int u_hasTexture;\r\n        varying vec4 v_color;\r\n        void main() {\r\n          if ( u_hasTexture == 1 ) {\r\n            gl_FragColor = v_color * texture2D(u_texture, gl_PointCoord);\r\n          } else {\r\n            gl_FragColor = v_color;\r\n          }\r\n        }`,\r\n            uniforms: {},\r\n            buffers: {},\r\n            camera: {},\r\n            texture: null,\r\n            onUpdate: ( () => {} ),\r\n            onResize: ( () => {} ),\r\n        }, options )\r\n\r\n        const uniforms = Object.assign( {\r\n            time: { type: 'float', value: 0 },\r\n            hasTexture: { type: 'int', value: 0 },\r\n            resolution: { type: 'vec2', value: [ 0, 0 ] },\r\n            mousemove: { type: 'vec2', value: [ 0, 0 ] },\r\n            projection: { type: 'mat4', value: [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ] },\r\n        }, options.uniforms )\r\n\r\n        const buffers = Object.assign( {\r\n            position: { size: 3, data: [] },\r\n            color: { size: 4, data: [] },\r\n        }, options.buffers )\r\n\r\n        const camera = Object.assign( {\r\n            fov: 60,\r\n            near: 1,\r\n            far: 10000,\r\n            aspect: 1,\r\n            z: 100,\r\n            perspective: true,\r\n        }, options.camera )\r\n\r\n        const canvas = document.createElement( 'canvas' )\r\n        const gl = canvas.getContext( 'webgl', { antialias: options.antialias } )\r\n\r\n        if ( ! gl ) return false\r\n\r\n        this.count = 0\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.camera = camera\r\n        this.holder = holder\r\n        this.msaa = options.msaa\r\n        this.onUpdate = options.onUpdate\r\n        this.onResize = options.onResize\r\n        this.data = {}\r\n\r\n        holder.appendChild( canvas )\r\n\r\n        this.createProgram( options.vertex, options.fragment )\r\n\r\n        this.createBuffers( buffers )\r\n        this.createUniforms( uniforms )\r\n\r\n        this.updateBuffers()\r\n        this.updateUniforms()\r\n\r\n        this.createTexture( options.texture )\r\n\r\n        gl.enable( gl.BLEND )\r\n        gl.enable( gl.CULL_FACE )\r\n        gl.blendFunc( gl.SRC_ALPHA, gl.ONE )\r\n        gl[ options.depthTest ? 'enable' : 'disable' ]( gl.DEPTH_TEST )\r\n\r\n        if ( options.autosize )\r\n            window.addEventListener( 'resize', e => this.resize( e ), false )\r\n        if ( options.mousemove )\r\n            window.addEventListener( 'mousemove', e => this.mousemove( e ), false )\r\n\r\n        this.resize()\r\n\r\n        this.update = this.update.bind( this )\r\n        this.time = { start: performance.now(), old: performance.now() }\r\n        this.update()\r\n\r\n    }\r\n\r\n    mousemove( e ) {\r\n\r\n        let x = e.pageX / this.width * 2 - 1\r\n        let y = e.pageY / this.height * 2 - 1\r\n\r\n        this.uniforms.mousemove = [ x, y ]\r\n\r\n    }\r\n\r\n    resize( e ) {\r\n\r\n        const holder = this.holder\r\n        const canvas = this.canvas\r\n        const gl = this.gl\r\n\r\n        const width = this.width = holder.offsetWidth\r\n        const height = this.height = holder.offsetHeight\r\n        const aspect = this.aspect = width / height\r\n        const dpi = this.dpi = Math.max( this.msaa ? 2 : 1, devicePixelRatio )\r\n\r\n        canvas.width = width * dpi\r\n        canvas.height = height * dpi\r\n        canvas.style.width = width + 'px'\r\n        canvas.style.height = height + 'px'\r\n\r\n        gl.viewport( 0, 0, width * dpi, height * dpi )\r\n        gl.clearColor( 0, 0, 0, 0 )\r\n\r\n        this.uniforms.resolution = [ width, height ]\r\n        this.uniforms.projection = this.setProjection( aspect )\r\n\r\n        this.onResize( width, height, dpi )\r\n\r\n    }\r\n\r\n    setProjection( aspect ) {\r\n\r\n        const camera = this.camera\r\n\r\n        if ( camera.perspective ) {\r\n\r\n            camera.aspect = aspect\r\n\r\n            const fovRad = camera.fov * ( Math.PI / 180 )\r\n            const f = Math.tan( Math.PI * 0.5 - 0.5 * fovRad )\r\n            const rangeInv = 1.0 / ( camera.near - camera.far )\r\n\r\n            const matrix = [\r\n                f / camera.aspect, 0, 0, 0,\r\n                0, f, 0, 0,\r\n                0, 0, (camera.near + camera.far) * rangeInv, -1,\r\n                0, 0, camera.near * camera.far * rangeInv * 2, 0\r\n            ]\r\n\r\n            matrix[ 14 ] += camera.z\r\n            matrix[ 15 ] += camera.z\r\n\r\n            return matrix\r\n\r\n        } else {\r\n\r\n            return [\r\n                2 / this.width, 0, 0, 0,\r\n                0, -2 / this.height, 0, 0,\r\n                0, 0, 1, 0,\r\n                -1, 1, 0, 1,\r\n            ]\r\n\r\n        }\r\n\r\n    }\r\n\r\n    createShader( type, source ) {\r\n\r\n        const gl = this.gl\r\n        const shader = gl.createShader( type )\r\n\r\n        gl.shaderSource( shader, source )\r\n        gl.compileShader( shader )\r\n\r\n        if ( gl.getShaderParameter (shader, gl.COMPILE_STATUS ) ) {\r\n\r\n            return shader\r\n\r\n        } else {\r\n\r\n            console.log( gl.getShaderInfoLog( shader ) )\r\n            gl.deleteShader( shader )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    createProgram( vertex, fragment ) {\r\n\r\n        const gl = this.gl\r\n\r\n        const vertexShader = this.createShader( gl.VERTEX_SHADER, vertex )\r\n        const fragmentShader = this.createShader( gl.FRAGMENT_SHADER, fragment )\r\n\r\n        const program = gl.createProgram()\r\n\r\n        gl.attachShader( program, vertexShader )\r\n        gl.attachShader( program, fragmentShader )\r\n        gl.linkProgram( program )\r\n\r\n        if ( gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\r\n\r\n            gl.useProgram( program )\r\n            this.program = program\r\n\r\n        } else {\r\n\r\n            console.log( gl.getProgramInfoLog( program ) )\r\n            gl.deleteProgram( program )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    createUniforms( data ) {\r\n\r\n        const gl = this.gl\r\n        const uniforms = this.data.uniforms = data\r\n        const values = this.uniforms = {}\r\n\r\n        Object.keys( uniforms ).forEach( name => {\r\n\r\n            const uniform = uniforms[ name ]\r\n\r\n            uniform.location = gl.getUniformLocation( this.program, 'u_' + name )\r\n\r\n            Object.defineProperty( values, name, {\r\n                set: value => {\r\n\r\n                    uniforms[ name ].value = value\r\n                    this.setUniform( name, value )\r\n\r\n                },\r\n                get: () => uniforms[ name ].value\r\n            } )\r\n\r\n        } )\r\n\r\n    }\r\n\r\n    setUniform( name, value ) {\r\n\r\n        const gl = this.gl\r\n        const uniform = this.data.uniforms[ name ]\r\n\r\n        uniform.value = value\r\n\r\n        switch ( uniform.type ) {\r\n            case 'int': {\r\n                gl.uniform1i( uniform.location, value )\r\n                break\r\n            }\r\n            case 'float': {\r\n                gl.uniform1f( uniform.location, value )\r\n                break\r\n            }\r\n            case 'vec2': {\r\n                gl.uniform2f( uniform.location, ...value )\r\n                break\r\n            }\r\n            case 'vec3': {\r\n                gl.uniform3f( uniform.location, ...value )\r\n                break\r\n            }\r\n            case 'vec4': {\r\n                gl.uniform4f( uniform.location, ...value )\r\n                break\r\n            }\r\n            case 'mat2': {\r\n                gl.uniformMatrix2fv( uniform.location, false, value )\r\n                break\r\n            }\r\n            case 'mat3': {\r\n                gl.uniformMatrix3fv( uniform.location, false, value )\r\n                break\r\n            }\r\n            case 'mat4': {\r\n                gl.uniformMatrix4fv( uniform.location, false, value )\r\n                break\r\n            }\r\n        }\r\n\r\n        // ivec2       : uniform2i,\r\n        // ivec3       : uniform3i,\r\n        // ivec4       : uniform4i,\r\n        // sampler2D   : uniform1i,\r\n        // samplerCube : uniform1i,\r\n        // bool        : uniform1i,\r\n        // bvec2       : uniform2i,\r\n        // bvec3       : uniform3i,\r\n        // bvec4       : uniform4i,\r\n\r\n    }\r\n\r\n    updateUniforms() {\r\n\r\n        const gl = this.gl\r\n        const uniforms = this.data.uniforms\r\n\r\n        Object.keys( uniforms ).forEach( name => {\r\n\r\n            const uniform = uniforms[ name ]\r\n\r\n            this.uniforms[ name ] = uniform.value\r\n\r\n        } )\r\n\r\n    }\r\n\r\n    createBuffers( data ) {\r\n\r\n        const gl = this.gl\r\n        const buffers = this.data.buffers = data\r\n        const values = this.buffers = {}\r\n\r\n        Object.keys( buffers ).forEach( name => {\r\n\r\n            const buffer = buffers[ name ]\r\n\r\n            buffer.buffer = this.createBuffer( 'a_' + name, buffer.size )\r\n\r\n            Object.defineProperty( values, name, {\r\n                set: data => {\r\n\r\n                    buffers[ name ].data = data\r\n                    this.setBuffer( name, data )\r\n\r\n                    if ( name == 'position' )\r\n                        this.count = buffers.position.data.length / 3\r\n\r\n                },\r\n                get: () => buffers[ name ].data\r\n            } )\r\n\r\n        } )\r\n\r\n    }\r\n\r\n    createBuffer( name, size ) {\r\n\r\n        const gl = this.gl\r\n        const program = this.program\r\n\r\n        const index = gl.getAttribLocation( program, name )\r\n        const buffer = gl.createBuffer()\r\n\r\n        gl.bindBuffer( gl.ARRAY_BUFFER, buffer )\r\n        gl.enableVertexAttribArray( index )\r\n        gl.vertexAttribPointer( index, size, gl.FLOAT, false, 0, 0 )\r\n\r\n        return buffer\r\n\r\n    }\r\n\r\n    setBuffer( name, data ) {\r\n\r\n        const gl = this.gl\r\n        const buffers = this.data.buffers\r\n\r\n        if ( name == null && ! gl.bindBuffer( gl.ARRAY_BUFFER, null ) ) return\r\n\r\n        gl.bindBuffer( gl.ARRAY_BUFFER, buffers[ name ].buffer )\r\n        gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( data ), gl.STATIC_DRAW )\r\n\r\n    }\r\n\r\n    updateBuffers() {\r\n\r\n        const gl = this.gl\r\n        const buffers = this.buffers\r\n\r\n        Object.keys( buffers ).forEach( name =>\r\n            buffers[ name ] = buffers.data\r\n        )\r\n\r\n        this.setBuffer( null )\r\n\r\n    }\r\n\r\n    createTexture( src ) {\r\n\r\n        const gl = this.gl\r\n        const texture = gl.createTexture()\r\n\r\n        gl.bindTexture( gl.TEXTURE_2D, texture )\r\n        gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array( [ 0, 0, 0, 0 ] ) )\r\n\r\n        this.texture = texture\r\n\r\n        if ( src ) {\r\n\r\n            this.uniforms.hasTexture = 1\r\n            this.loadTexture( src )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    loadTexture( src ) {\r\n\r\n        const gl = this.gl\r\n        const texture = this.texture\r\n\r\n        const textureImage = new Image()\r\n\r\n        textureImage.onload = () => {\r\n\r\n            gl.bindTexture( gl.TEXTURE_2D, texture )\r\n\r\n            gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage )\r\n\r\n            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR )\r\n            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR )\r\n\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n\r\n            // gl.generateMipmap( gl.TEXTURE_2D )\r\n\r\n        }\r\n\r\n        textureImage.src = src\r\n\r\n    }\r\n\r\n    update() {\r\n\r\n        const gl = this.gl\r\n\r\n        const now = performance.now()\r\n        const elapsed = ( now - this.time.start ) / 5000\r\n        const delta = now - this.time.old\r\n        this.time.old = now\r\n\r\n        this.uniforms.time = elapsed\r\n\r\n        if ( this.count > 0 ) {\r\n            gl.clear( gl.COLORBUFFERBIT )\r\n            gl.drawArrays( gl.POINTS, 0, this.count )\r\n        }\r\n\r\n        this.onUpdate( delta )\r\n\r\n        requestAnimationFrame( this.update )\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}