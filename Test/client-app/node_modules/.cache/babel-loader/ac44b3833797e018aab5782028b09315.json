{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeCool\\\\TW3\\\\Test\\\\Test\\\\client-app\\\\src\\\\components\\\\Selects\\\\CustomSelect2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst animatedComponents = makeAnimated();\n\nconst ReactSelect = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const maxOptions = 5;\n  const [selectedOption, setSelectedOption] = useState([]);\n\n  const handleTypeSelect = e => {\n    setSelectedOption(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    onChange: handleTypeSelect,\n    getOptionLabel: x => x.Name,\n    getOptionValue: x => x.Id,\n    components: animatedComponents,\n    isMulti: true,\n    options: selectedOption.length === maxOptions ? [] : data,\n    noOptionsMessage: () => {\n      return selectedOption.length === maxOptions ? 'You have reached the max options value' : 'No options available';\n    },\n    label: \"tags\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactSelect, \"rwjp7YCvC/5ctQFiGmJfIluprVo=\");\n\n_c = ReactSelect;\nexport default ReactSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactSelect\");","map":{"version":3,"sources":["D:/CodeCool/TW3/Test/Test/client-app/src/components/Selects/CustomSelect2.js"],"names":["React","useState","Select","makeAnimated","animatedComponents","ReactSelect","data","maxOptions","selectedOption","setSelectedOption","handleTypeSelect","e","x","Name","Id","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AACA,MAAMC,kBAAkB,GAAGD,YAAY,EAAvC;;AAEA,MAAME,WAAW,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAC9B,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;;AACA,QAAMS,gBAAgB,GAAGC,CAAC,IAAI;AAC1BF,IAAAA,iBAAiB,CAACE,CAAD,CAAjB;AACH,GAFD;;AAIA,sBACI,QAAC,MAAD;AACI,IAAA,QAAQ,EAAED,gBADd;AAEI,IAAA,cAAc,EAAEE,CAAC,IAAIA,CAAC,CAACC,IAF3B;AAGI,IAAA,cAAc,EAAED,CAAC,IAAIA,CAAC,CAACE,EAH3B;AAII,IAAA,UAAU,EAAEV,kBAJhB;AAKI,IAAA,OAAO,MALX;AAMI,IAAA,OAAO,EAAEI,cAAc,CAACO,MAAf,KAA0BR,UAA1B,GAAuC,EAAvC,GAA4CD,IANzD;AAOI,IAAA,gBAAgB,EAAE,MAAM;AACpB,aAAOE,cAAc,CAACO,MAAf,KAA0BR,UAA1B,GACD,wCADC,GAED,sBAFN;AAGH,KAXL;AAYI,IAAA,KAAK,EAAC;AAZV;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAvBD;;GAAMF,W;;KAAAA,W;AAyBN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst ReactSelect = ({ data }) => {\r\n    const maxOptions = 5;\r\n    const [selectedOption, setSelectedOption] = useState([]);\r\n    const handleTypeSelect = e => {\r\n        setSelectedOption(e);\r\n    };\r\n\r\n    return (\r\n        <Select\r\n            onChange={handleTypeSelect}\r\n            getOptionLabel={x => x.Name}\r\n            getOptionValue={x => x.Id}\r\n            components={animatedComponents}\r\n            isMulti\r\n            options={selectedOption.length === maxOptions ? [] : data}\r\n            noOptionsMessage={() => {\r\n                return selectedOption.length === maxOptions\r\n                    ? 'You have reached the max options value'\r\n                    : 'No options available';\r\n            }}\r\n            label='tags'\r\n        />\r\n    );\r\n};\r\n\r\nexport default ReactSelect;"]},"metadata":{},"sourceType":"module"}